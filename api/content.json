{
    "code": 10000,
    "data": {
        "change": "[TOC]\n更新记录\n=======\nv2.0.2 2020-05-08\n-----------------\n\n- feat: `joinWith` 使用了别名，优先使用别名\n\nv2.0.1 2020-05-01\n-----------------\n\n- feat: 添加 `and` 和 `or` 预定义字段查询，支持嵌套\n- refactor: \n    - `posts.name` 查询改为添加`join`查询条件 而不是关联查询条件 \n    - `rel.posts.name` 给关联查询添加附加添加 \n- delete: 删除 `findWhere` 方法； 上述 `and` 和 `or` 完全可以代替\n\nv2.0.0 2020-04-20\n-----------------\n- feat: 添加 `throw` 方法，抛出错误\n- refactor: 部分代码重构\n    1. `create` 方法返回 `$model->toArray()` 结果\n    2. `update` 方法返回修改受影响行数\n    3. `delete` 方法返回返回删除行数\n    4. `paginate` 方法返回 `\\Illuminate\\Pagination\\Paginator` 对象\n    5. `firstField` 方法重命名为 `getFieldArray`\n- delete: 删除部分方法\n    1. `success` 方法\n    2. `error` 方法\n    3. `getRelationDefaultFilters` 方法\n    4. `getError` 方法\n    5. `firstKey` 方法\n- refactor: 命名空间修改为 `Littlebug\\Repository`\n\nv1.0.18 2020-05-01\n------------------\n\n- feat: 添加新功能\n    - 添加 `and` 和 `or` 的查询方式\n    - 添加 `instance` 静态方法调用，可以不依赖注入使用`repository`类\n    ```php\n    \\Littlebug\\Repository\\Repository::instance()->find(['status' => 1]);\n    ```\n- factor: 代码重构\n    - `firstField` 方法重命名为 `getFieldArray`\n    - 删除类方法 `handleExtraQuery` 中拦截的 `offset`、`limit` 字段\n    - 删除类方法 `conditionQuery` 中 `scope` 自定义方法的处理\n- delete: 删除方法\n    - 删除 `findWhere` 方法； 上述 `and` 和 `or` 完全可以代替\n    - 删除 `firstKey` 方法， `findBy` 和 `findAllBy` 字段参数不兼容数组，必须传递字符串\n- test: 添加测试用例\n \nv1.0.16 2020-03-21\n------------------\n\n- refactor: 部分代码重构\n    * 删除 `$paginateStyle` 属性\n    * 删除 `setPaginateStyle` 方法\n\n- feat: 添加方法 \n    * 添加 `simplePaginate($condition = [], $columns = [], $size = 10, $current = null)` 方法\n    * 添加 `filterSimplePaginate($condition = [], $columns = [], $size = 10, $current = null)` 方法\n    * 添加 `filterFindBy($conditions, $column)` 方法\n    * 添加 `filterFindAllBy($conditions, $column)` 方法\n\n- fix: 修复关联表查询 `['__goods.id' => 1]` 条件添加不上问题\n\nv1.0.15 2019-11-04\n------------------\n\n- refactor: 命令行使用英文说明\n\nv1.0.14 2019-11-01\n------------------\n\n- feat: `repository` 查询添加对 joinWith、leftJoinWith、rightJoinWith、join、leftJoin、rightJoin、的支持\n![使用参考](https:\/\/wanchaochao.github.io\/laravel-repository\/docs\/images\/join.png 'join使用参考')\n- refactor: `repository` 没有指定查询字段、默认查询 table.* 而不是 * (解决关联&连表查询字段问题)\n- refactor: `repository` 查询条件添加对原生的SQL支持，`DB::raw('users.username >= users.type')`\n- change: `repository` 修改查询条件中定义了关联、但是在查询字段的时候、没有定义要查询关联的字段、\n那么不添加关联查询(关联条件也会舍弃)、之前处理会自动添加关联查询! 如果需要按照之前的处理的话，需要自己重写 \n`getRelations` 方法\n\nv1.0.13 2019-08-24\n------------------\n\n- refactor: `repository` 的 `update` 方法优化，使用批量删除，但应用模型的修改器\n\nv1.0.12 2019-07-22\n------------------\n\n- add: 添加两个`trait`; 方便在修改和删除之前或者之后清理缓存；\n    - `BeforeTrait` 在修改和删除之前执行 `clearCache` 方法\n    - `AfterTrait` 在修改和删除之后执行 `clearCache` 方法\n\nv1.0.11 2019-07-05\n------------------\n\n- refactor: 优化 `repository` `update` 方法 如果是通过主键修改，不走批量修改(可以走修改器)\n- add: `repository` 添加 `filterPaginate` 方法 过滤查询分页数据信息\n\nv1.0.10 2019-06-27\n------------------\n\n- refactor: `repository`中`getRelationModel`方法优化\n\n    有关联`count`查询，如果指定字段，那么不查询全部字段\n\n- refactor: `repository`中`findWhere`优化，对关联数组查询支持\n\n    ```php\n    $this->userRepository->findWhere([\n        'and', \n        ['username' => 1, 'age' => 2],\n        ['or', ['name' => '1', 'name:eq' => 2]]\n    ])->get();\n    ```\n\nv1.0.9 2019-06-15\n-----------------\n\n- fix: `findWhere`查询`or`查询的bug \n- add: `repository`查询指定字段关联字段添加支持反向关联\n\nv1.0.8 2019-06-12\n-----------------\n\n- add: `repository`添加新方法\n    - `findWhere(array $where, array $columns = [])`通过数组查询数据,支持更复杂的查询\n    \n    ```php\n    $this->userRepository->findWhere([\n        'and',\n        ['or', ['username', 'like', 'test'], ['age' => 5]],\n        ['level' => 5]\n    ])->get();\n    \n    \/\/ sql: where ((`username` like 'test' or `age` = 5) and `level` = 5)\n    ```\n- remove: 删除多余代码生成命令\n\nv1.0.7 2019-06-06\n-----------------\n\n- add: repository 支持更多的 model 原生方法\n\n     * @method Model firstOrCreate(array $attributes, array $value = [])\n     * @method Model firstOrNew(array $attributes, array $value = [])\n     * @method Model updateOrCreate(array $attributes, array $value = [])\n     * @method Model findOrFail($id, $columns = ['*'])\n     * @method Model findOrNew($id, $columns = ['*'])\n     * @method Model findMany($ids, $columns = ['*'])\n     \n- add: repository 添加事件处理方法\n    - beforeCreate(array $data)\n    - afterCreate(array $data, array $news)\n    - beforeUpdate(array $conditions, array $data)\n    - afterUpdate(array $conditions, array $data, $row)\n    - beforeDelete(array $conditions)\n    - afterDelete(array $conditions, $row)\n\n- fix: 修复 withCount 不存在报的错误\n\nv1.0.6 2019-06-03\n-----------------\n- add: repository 添加 getFilterModel($conditions, $fields) 方法\n\nv1.0.5 2019-06-02\n-----------------\n\n- change: repository 所有方法全部对外开放(方法全部为public)\n\nv1.0.4 2019-06-02\n-----------------\n\n- bug: 因为批量赋值使用的是黑名单制，laravel 不会自己过滤多余字段，导致新增时候添加了多余字段bug修复\n\nv1.0.3 2019-06-02\n-----------------\n\n- change: model 没有通过字段 columns 定义表的字段，那么通过数据库查询获取表的字段信息\n",
        "api": "# API List\n\n[TOC]\n\n## 1、Retrieves the model and the collection\n\n### first()\n\n```\npublic function first($conditions, $columns = []);\n```\n\nRetrieve objects\n\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$columns` Query field；[Support field specification](\/?page=repository#6、query-field%20description)\n#### example\n\n```php\n$user = $this->userRepository->first([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']]);\n```\n\n### firstOrFail()\n\n```\npublic function firstOrFail($conditions, $columns = []);\n```\nRetrieves an object, but the query does not throw an error\n\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$columns` Query field；[Support field specification](\/?page=repository#6、query-field%20description)\n#### example\n\n```php\n$user = $this->userRepository->firstOrFail([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']]);\n```\n\n### get()\n\n```\npublic function get($conditions, $columns = []);\n```\n\nRetrieve the collection\n\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$columns` Query field；[Support field specification](\/?page=repository#6、query-field%20description)\n#### example\n\n```php\n$users = $this->userRepository->get([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']]);\n```\n\n### pluck()\n\nRetrieve the collection\n\n```\npublic function pluck($conditions, $column, $key = null);\n```\n#### Parameters\n\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$column` Specify the fields for the query\n- `$key` Specify the field as the key\n\n#### example\n\n```php\n$user_ids = $this->userRepository->pluck([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'user_id');\n\n\/\/ Specify the field as the key\n$ages = $this->userRepository->pluck([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age', 'user_id');\n```\n## 2、Statistical query\n\n### count()\n\ncount\n\n```\npublic function count($conditions, $column = '*');\n```\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$column` Specifies the fields for statistics by default *\n#### example\n\n```php\n$count = $this->userRepository->count([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n]);\n```\n\n### max()\n\nmax\n\n```\npublic function max($conditions, $column);\n```\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$column` Specified field\n#### example\n\n```php\n$max_age = $this->userRepository->max([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age');\n```\n\n### min()\n\nmin\n\n```\npublic function min($conditions, $column);\n```\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$column` Specified field\n#### example\n\n```php\n$min_age = $this->userRepository->min([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age');\n```\n\n### avg()\n\navg\n\n```\npublic function avg($conditions, $column);\n```\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$column` Specified field\n#### example\n\n```php\n$avg_age = $this->userRepository->avg([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n]);\n```\n\n### sum()\n\nsum\n\n```\npublic function sum($conditions, $column);\n```\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$column` Specified field\n#### example\n\n```php\n$sum_age = $this->userRepository->sum([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age');\n```\n\n## 3、Data increasing and decreasing\n\n### increment() \n\nIncrements the specified value by the specified field (default increments 1)\n\n```\npublic function increment($conditions, $column, $amount = 1, $extra = []);\n```\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$column` Specified field\n- `$amount` Incremented value, default 1\n- `$extra`  Attach modified values\n#### example\n\n```php\n\/\/ 年龄加1、状态改为1\n$ok = $this->userRepository->increment([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age', 1, ['status' => 1]);\n```\n\n### decrement() \n\nDecrement the specified value by the specified field (default decrement 1)\n\n```\npublic function decrement($conditions, $column, $amount = 1, $extra = []);\n```\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$column` Specified field\n#### example\n\n```php\n\/\/ Age minus 1, state 1\n$ok = $this->userRepository->decrement([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age', 1, ['status' => 1]);\n```\n\n## 4、Add data\n\n### insert() \n\nThe new data\n\n```\npublic function insert(array $values);\n```\n#### Parameters\n- `$values` The new data needs to be a full field array\n#### example\n\n```php\n$ok = $this->userRepository->insert([\n    'name'       => '123456',\n    'age'        => 20,\n    'status'     => 1,\n    'created_at' => date('Y-m-d H:i:s'),\n    'updated_at' => date('Y-m-d H:i:s'),\n]);\n```\n\n#### You can add data in batches\n```php\n$ok = $this->userRepository->insert([\n    [\n        'name'       => '123456',\n        'age'        => 20,\n        'status'     => 1,\n        'created_at' => date('Y-m-d H:i:s'),\n        'updated_at' => date('Y-m-d H:i:s'),\n    ],\n        [\n        'name'       => '123456789',\n        'age'        => 20,\n        'status'     => 1,\n        'created_at' => date('Y-m-d H:i:s'),\n        'updated_at' => date('Y-m-d H:i:s'),\n    ],\n]);\n```\n\n### insertGetId() \n\nThe new data gets the new ID\n\n```\npublic function insertGetId(array $values);\n```\n#### Parameters\n- `$values` The new data needs to be a full field array\n#### example\n\n```php\n$user_id = $this->userRepository->insertGetId([\n    'name'       => '123456',\n    'age'        => 20,\n    'status'     => 1,\n    'created_at' => date('Y-m-d H:i:s'),\n    'updated_at' => date('Y-m-d H:i:s'),\n]);\n```\n\n### firstOrCreate() \n\nThe query object is not created (new data is executed), and the query is not processed\n\n```\npublic function firstOrCreate(array $attribute, array $values);\n```\n#### Parameters\n- `$attribute` An array of query properties for the query data\n- `$values` Creates an array of additional properties for the data\n#### example\n\n```php\n\/\/ Query name is 123456, not so created, exist not processed\n$user = $this->userRepository->firstOrCreate(['name' => '123456'], [\n    'status' => 1,\n    'age'    => 20,\n]);\n```\n\n### firstOrNew() \n\nThe query data is not instantiated\n\n```\npublic function firstOrNew(array $attribute, array $values);\n```\n#### Parameters\n- `$attribute` An array of query properties for the query data\n- `$values` Creates an array of additional properties for the data\n#### example\n\n```php\n\/\/ The query name is 123456, so there is no New object\n$user = $this->userRepository->firstOrNew(['name' => '123456'], [\n    'status' => 1,\n    'age'    => 20,\n]);\n\n\/\/ If you want to add it\n\/\/ $user->save();\n```\n\n### updateOrCreate() \n\nQuery changes are not created\n\n```\npublic function UpdateOrCreate(array $attribute, array $values);\n```\n#### Parameters\n- `$attribute` An array of query properties for the query data\n- `$values` Modify the array of properties\n#### example\n\n```php\n\/\/ The query name is 123456, so the modified state is 1 and the age is 20, not so the created data\n$user = $this->userRepository->UpdateOrCreate(['name' => '123456'], [\n    'status' => 1,\n    'age'    => 20,\n]);\n```\n\n### updateOrInsert() \n\nQuery modification is not instantiated\n\n```\npublic function updateOrInsert(array $attribute, array $values);\n```\n#### Parameters\n- `$attribute` An array of query properties for the query data\n- `$values` Modify the array of properties\n#### example\n\n```php\n\/\/ The query name is 123456, so the modified state is 1 and the age is 20, there is no such instantiation of the object\n$user = $this->userRepository->updateOrInsert(['name' => '123456'], [\n    'status' => 1,\n    'age'    => 20,\n]);\n```\n\n### 5、Other methods\n\n### newBuilder()\n\nCreate a Query `Illuminate\\Database\\Query Builder` or `Illuminate\\Database\\ Builder` object\n\n>All query methods are implemented based on this method\n\n```\npublic function newBuilder($conditions, $columns = [])\n```\n\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n- `$columns` Query field；[Support field specification](\/?page=repository#6、query-field%20description)\n#### example\n\n```php\n\/\/ new builder\n$builder = $this->userRepository->newBuilder([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']]);\n\n\/\/ Querying individual data\n$user = $this->userRepository->newBuilder([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']])->first();\n\n\/\/ Query multiple data\n$user = $this->userRepository->newBuilder([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']])->get();\n```\n\n### filterCondition()\n\nFilter the null value in Query conditions in the way of `filter` series. Query conditions is processed with this method\n\n>An empty array, empty string, ' ', and null are considered null values\n\n```\npublic function filterCondition($conditions)\n```\n\n#### Parameters\n- `$conditions` Query conditions；[Multiple queries are supported](\/?page=repository#5、description-of%20query%20conditions)\n#### example\n\n```php\n\/\/ 获取Query conditions\n$conditions = $this->userRepository->filterCondition([\n    'status:in'      => request()->input('status'),\n    'username:like'  => request()->input('username'),\n]);\n\n```",
        "api.zh-CN": "# API 列表\n\n[TOC]\n\n## 一、检索model和集合\n\n### first()\n```\npublic function first($conditions, $columns = []);\n```\n检索对象\n\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$columns` 查询字段；[支持字段指定](\/?page=repository#六、查询字段说明)\n#### 示例\n\n```php\n$user = $this->userRepository->first([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']]);\n```\n\n### firstOrFail()\n\n```\npublic function firstOrFail($conditions, $columns = []);\n```\n检索对象,查询不到抛出错误\n\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$columns` 查询字段；[支持字段指定](\/?page=repository#六、查询字段说明)\n#### 示例\n\n```php\n$user = $this->userRepository->firstOrFail([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']]);\n```\n\n### get()\n\n```\npublic function get($conditions, $columns = []);\n```\n检索集合\n\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$columns` 查询字段；[支持字段指定](\/?page=repository#六、查询字段说明)\n#### 示例\n\n```php\n$users = $this->userRepository->get([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']]);\n```\n\n### pluck()\n检索集合\n```\npublic function pluck($conditions, $column, $key = null);\n```\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$column` 指定查询的字段\n- `$key` 指定字段作为key\n#### 示例\n\n```php\n$user_ids = $this->userRepository->pluck([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'user_id');\n\n\/\/ 指定字段作为key\n$ages = $this->userRepository->pluck([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age', 'user_id');\n```\n## 二、统计查询\n\n### count()\n\n统计数量\n\n```\npublic function count($conditions, $column = '*');\n```\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$column` 指定统计的字段默认*\n#### 示例\n\n```php\n$count = $this->userRepository->count([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n]);\n```\n\n### max()\n\n获取最大值\n\n```\npublic function max($conditions, $column);\n```\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$column` 指定字段\n#### 示例\n\n```php\n$max_age = $this->userRepository->max([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age');\n```\n\n### min()\n\n获取最小值\n\n```\npublic function min($conditions, $column);\n```\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$column` 指定字段\n#### 示例\n\n```php\n$min_age = $this->userRepository->min([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age');\n```\n\n### avg()\n\n获取平均值\n\n```\npublic function avg($conditions, $column);\n```\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$column` 指定字段\n#### 示例\n\n```php\n$avg_age = $this->userRepository->avg([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n]);\n```\n\n### sum()\n\n求和\n\n```\npublic function sum($conditions, $column);\n```\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$column` 指定字段\n#### 示例\n\n```php\n$sum_age = $this->userRepository->sum([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age');\n```\n\n## 三、数据递增递减\n\n### increment() \n按查询条件指定字段递增指定值(默认递增1)\n\n```\npublic function increment($conditions, $column, $amount = 1, $extra = []);\n```\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$column` 指定字段\n- `$amount` 递增的值，默认1\n- `$extra`  附加修改的值\n#### 示例\n\n```php\n\/\/ 年龄加1、状态改为1\n$ok = $this->userRepository->increment([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age', 1, ['status' => 1]);\n```\n\n### decrement() \n按查询条件指定字段递减指定值(默认递减1)\n\n```\npublic function decrement($conditions, $column, $amount = 1, $extra = []);\n```\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$column` 指定字段\n#### 示例\n\n```php\n\/\/ 年龄减1，状态改为1\n$ok = $this->userRepository->decrement([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], 'age', 1, ['status' => 1]);\n```\n\n## 四、添加数据\n\n### insert() \n\n新增数据\n\n```\npublic function insert(array $values);\n```\n#### 参数说明\n- `$values` 新增的数据、需要是全量字段数组\n#### 示例\n\n```php\n$ok = $this->userRepository->insert([\n    'name'       => '123456',\n    'age'        => 20,\n    'status'     => 1,\n    'created_at' => date('Y-m-d H:i:s'),\n    'updated_at' => date('Y-m-d H:i:s'),\n]);\n```\n\n#### 可以批量添加数据\n```php\n$ok = $this->userRepository->insert([\n    [\n        'name'       => '123456',\n        'age'        => 20,\n        'status'     => 1,\n        'created_at' => date('Y-m-d H:i:s'),\n        'updated_at' => date('Y-m-d H:i:s'),\n    ],\n        [\n        'name'       => '123456789',\n        'age'        => 20,\n        'status'     => 1,\n        'created_at' => date('Y-m-d H:i:s'),\n        'updated_at' => date('Y-m-d H:i:s'),\n    ],\n]);\n```\n\n### insertGetId() \n\n新增数据获取新增ID\n\n```\npublic function insertGetId(array $values);\n```\n#### 参数说明\n- `$values` 新增的数据、需要是全量字段数组\n#### 示例\n\n```php\n$user_id = $this->userRepository->insertGetId([\n    'name'       => '123456',\n    'age'        => 20,\n    'status'     => 1,\n    'created_at' => date('Y-m-d H:i:s'),\n    'updated_at' => date('Y-m-d H:i:s'),\n]);\n```\n\n### firstOrCreate() \n\n查询对象没有就创建(执行新增数据)，查询到不处理\n\n```\npublic function firstOrCreate(array $attribute, array $values);\n```\n#### 参数说明\n- `$attribute` 查询数据的查询属性数组\n- `$values` 创建数据的附加属性数组\n#### 示例\n\n```php\n\/\/ 查询名称为123456，没有那么创建, 存在不处理\n$user = $this->userRepository->firstOrCreate(['name' => '123456'], [\n    'status' => 1,\n    'age'    => 20,\n]);\n```\n\n### firstOrNew() \n\n查询数据没有就实例化\n\n```\npublic function firstOrNew(array $attribute, array $values);\n```\n#### 参数说明\n- `$attribute` 查询数据的查询属性数组\n- `$values` 创建数据的附加属性数组\n#### 示例\n\n```php\n\/\/ 查询名称为123456，没有那么New对象\n$user = $this->userRepository->firstOrNew(['name' => '123456'], [\n    'status' => 1,\n    'age'    => 20,\n]);\n\n\/\/ 如果要新增的话\n\/\/ $user->save();\n```\n\n### updateOrCreate() \n\n查询修改没有就创建\n\n```\npublic function UpdateOrCreate(array $attribute, array $values);\n```\n#### 参数说明\n- `$attribute` 查询数据的查询属性数组\n- `$values` 修改的属性数组\n#### 示例\n\n```php\n\/\/ 查询名称为123456，存在那么修改状态为 1 年龄为 20, 没有那么创建数据\n$user = $this->userRepository->UpdateOrCreate(['name' => '123456'], [\n    'status' => 1,\n    'age'    => 20,\n]);\n```\n\n### updateOrInsert() \n\n查询修改没有就实例化\n\n```\npublic function updateOrInsert(array $attribute, array $values);\n```\n#### 参数说明\n- `$attribute` 查询数据的查询属性数组\n- `$values` 修改的属性数组\n#### 示例\n\n```php\n\/\/ 查询名称为123456，存在那么修改状态为 1 年龄为 20, 没有那么实例化对象\n$user = $this->userRepository->updateOrInsert(['name' => '123456'], [\n    'status' => 1,\n    'age'    => 20,\n]);\n```\n\n### 五、其他方法\n\n### newBuilder()\n\n创建一个查询`Illuminate\\Database\\Query\\Builder` 或者 `Illuminate\\Database\\Eloquent\\Builder` 对象\n\n>所有查询方法都是基于该方法实现\n\n```\npublic function newBuilder($conditions, $columns = [])\n```\n\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$columns` 查询字段；[支持字段指定](\/?page=repository#六、查询字段说明)\n#### 示例\n\n```php\n\/\/ 获取 builder\n$builder = $this->userRepository->newBuilder([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']]);\n\n\/\/ 查询 单个数据\n$user = $this->userRepository->newBuilder([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']])->first();\n\n\/\/ 查询 多个数据\n$user = $this->userRepository->newBuilder([\n    'status:in'      => [1, 2, 3],\n    'username:like'  => 'test',\n], ['*', 'ext' => ['*']])->get();\n```\n\n### filterCondition()\n\n过滤查询条件中的空值，`filte`系列的方式，查询条件使用该方法处理\n\n>空数组、空字符串、' '、null 会被认为是空值\n\n```\npublic function filterCondition($conditions)\n```\n\n#### 参数说明\n- `$conditions` 查询条件；[支持多种方式查询](\/?page=repository#五、查询条件说明)\n#### 示例\n\n```php\n\/\/ 获取查询条件\n$conditions = $this->userRepository->filterCondition([\n    'status:in'      => request()->input('status'),\n    'username:like'  => request()->input('username'),\n]);\n\n```",
        "home": "laravel-repository\n==================\n[TOC]\n![Progress](http:\/\/progressed.io\/bar\/100?title=completed) \n[![Latest Stable Version](https:\/\/poser.pugx.org\/littlebug\/laravel-repository\/v\/stable)](https:\/\/packagist.org\/packages\/littlebug\/laravel-repository)[![Total Downloads](https:\/\/poser.pugx.org\/littlebug\/laravel-repository\/downloads)](https:\/\/packagist.org\/packages\/littlebug\/laravel-repository)[![Latest Unstable Version](https:\/\/poser.pugx.org\/littlebug\/laravel-repository\/v\/unstable)](https:\/\/packagist.org\/packages\/littlebug\/laravel-repository)[![License](https:\/\/poser.pugx.org\/littlebug\/laravel-repository\/license)](https:\/\/packagist.org\/packages\/littlebug\/laravel-repository)[![GitHub stars](https:\/\/img.shields.io\/github\/stars\/Wanchaochao\/laravel-repository.svg)](https:\/\/github.com\/Wanchaochao\/laravel-repository\/stargazers)[![GitHub issues](https:\/\/img.shields.io\/github\/issues\/Wanchaochao\/laravel-repository.svg)](https:\/\/github.com\/Wanchaochao\/laravel-repository\/issues)[![GitHub forks](https:\/\/img.shields.io\/github\/forks\/Wanchaochao\/laravel-repository.svg)](https:\/\/github.com\/Wanchaochao\/laravel-repository\/network)[![Laravel](https:\/\/img.shields.io\/badge\/Laravel%20%5E5.5-support-brightgreen.svg)](https:\/\/github.com\/laravel\/laravel)\n\n## 1. Introduction\n\n`laravel-repository` provides the basic `repository` class for [laravel](https:\/\/laravel.com\/)[model](https:\/\/learnku.com\/docs\/laravel\/5.5\/eloquent\/1332) The package was made to provide more\nMore external methods, and more friendly editor prompts; layering the code, `repository` is \nresponsible for external business logic processing, `model` is only responsible for the definition \nof the fields, attributes, query conditions, and return values of the data table. It does not \nparticipate in specific logical operations, and does not serve the control layer.\n\n>  Relative to the direct use of `model` advantages:\n\n- Solve the problem that `model` does not automatically handle extra fields when adding or modifying\n- Optimize chained calls for `model` queries, query directly using arrays\n- Automatically process corresponding associated data queries through query conditions and query fields\n- Provides a more friendly editor prompt\n\n## 2. Install\n\n> Installation requirements\n\n- PHP >= 7.0.0\n- Laravel >= 5.5.0\n\n> 1.1 Install package\n\n```bash\ncomposer require littlebug\/laravel-repository:2.0.*\n```\nor add this to require section in your composer.json file:\n\n```bash\n\"littlebug\/laravel-repository\": \"2.0.*\"\n```\nthen run composer update\n\n## 3. Used in the controller\n\n```php\n<?php\n\nuse Illuminate\\Routing\\Controller;\nuse Littlebug\\Repository\\Tests\\Stubs\\UserRepository;\n\nclass UsersController extends Controller \n{\n    \/**\n     * @var UserRepository\n     *\/\n    private $userRepository;\n    \n    public function __construct(UserRepository $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n    \n    public function index()\n    {\n        \/\/ Paging queries, returning paging objects\n        $paginate = $this->userRepository->paginate([\n            'name:like' => 'test', \n            'status'    => [1, 2], \/\/ Automatically converts to an in query\n        ]);\n        \n        return view('users.index', compact('paginate'));\n    }\n    \n    public function create()\n    {\n        \/\/ Add data and return an array\n        $user = $this->userRepository->create(request()->all());\n        dump($user);\n    }\n    \n    public function update()\n    {\n        \/\/ Modify the data and return the number of modified rows\n        $row = $this->userRepository->update(request()->input('id'), request()->all());\n        dump($row);\n    }\n    \n    public function delete()\n    {\n        \/\/ Deletes data and returns the number of rows deleted\n        $row = $this->userRepository->delete(request()->input('id'));\n        dump($row);\n    }\n}\n\n```\n\n## 4. Static method call\n\nIn addition to the injection method invocation described above, you can also use static method invocation; As follows:\n\n```php\nuse Littlebug\\Repository\\Tests\\Stubs\\UserRepository;\n\n$paginate = UserRepository::instance()->paginate(['status' => 1]);\n\n\/\/ Query a piece of data and return an array\n$user = UserRepository::instance()->find(['status' => 1, 'id:gt' => 2]);\n```\n\n## 5. More code generation commands\n\n> Commands support specifying database connections such as --table=dev.users\n\n### 5.1 `core:model` generates `model` class files and `repository` class files by querying database table information.\n\n    ```bash\n    php artisan core:model --table=users --name=User\n    ```\n\n### 5.2 `core:repository` generates the `repository` class file\n\n    ```bash\n    php artisan core:repository --model=User --name=UserRepository\n    ```\n\n### 5.3 `core:request` generates `request` verification class file by querying database table information\n\n    ```bash\n    php artisan core:request --table=users --path=Users\n    ```\n\n### 5.4 Command Parameter Details\n\n![commands of generate code](https:\/\/wanchaochao.github.io\/laravel-repository\/docs\/images\/commands-en.png 'core of commands')",
        "home.zh-CN": "laravel-repository\n==================\n\n[TOC]\n\n![Progress](http:\/\/progressed.io\/bar\/100?title=completed) \n[![Latest Stable Version](https:\/\/poser.pugx.org\/littlebug\/laravel-repository\/v\/stable)](https:\/\/packagist.org\/packages\/littlebug\/laravel-repository)[![Total Downloads](https:\/\/poser.pugx.org\/littlebug\/laravel-repository\/downloads)](https:\/\/packagist.org\/packages\/littlebug\/laravel-repository)[![Latest Unstable Version](https:\/\/poser.pugx.org\/littlebug\/laravel-repository\/v\/unstable)](https:\/\/packagist.org\/packages\/littlebug\/laravel-repository)[![License](https:\/\/poser.pugx.org\/littlebug\/laravel-repository\/license)](https:\/\/packagist.org\/packages\/littlebug\/laravel-repository)[![GitHub stars](https:\/\/img.shields.io\/github\/stars\/Wanchaochao\/laravel-repository.svg)](https:\/\/github.com\/Wanchaochao\/laravel-repository\/stargazers)[![GitHub issues](https:\/\/img.shields.io\/github\/issues\/Wanchaochao\/laravel-repository.svg)](https:\/\/github.com\/Wanchaochao\/laravel-repository\/issues)[![GitHub forks](https:\/\/img.shields.io\/github\/forks\/Wanchaochao\/laravel-repository.svg)](https:\/\/github.com\/Wanchaochao\/laravel-repository\/network)[![Laravel](https:\/\/img.shields.io\/badge\/Laravel%20%5E5.5-support-brightgreen.svg)](https:\/\/github.com\/laravel\/laravel)\n\n## 一、简介\n\n`laravel-repository` 提供了基础的 `repository` 类, 对[laravel](https:\/\/laravel.com\/) 的 \n[model](https:\/\/learnku.com\/docs\/laravel\/5.5\/eloquent\/1332) 进行了的封装，提供更\n多的对外的方法，以及更友好的编辑器提示；对代码进行了的分层，`repository` 负责对外的业务逻辑处理，\n`model` 只负责对数据表的字段、属性、查询条件、返回值的定义，不参与具体的逻辑运算，不对控制层服务\n\n> 相对于直接使用`model`优势：\n\n- 解决`model`在新增、修改时不自动处理多余字段问题\n- 优化`model`查询时的链式调用，直接使用数组的方式进行查询\n- 通过查询条件和查询字段，自动处理对应的关联数据查询\n- 提供了更友好的编辑器提示\n\n## 二、安装\n\n> 安装要求\n\n- PHP >= 7.0.0\n- Laravel >= 5.5.0\n\n> 安装包文件\n\n```bash\ncomposer require littlebug\/laravel-repository:2.0.*\n```\n或者在你的项目 composer.json 文件中添加:\n\n```bash\n\"littlebug\/laravel-repository\": \"2.0.*\"\n```\n然后执行 composer update\n\n## 三、在控制器中使用\n\n```php\n<?php\n\nuse Illuminate\\Routing\\Controller;\nuse Littlebug\\Repository\\Tests\\Stubs\\UserRepository;\n\nclass UsersController extends Controller \n{\n    \/**\n     * @var UserRepository\n     *\/\n    private $userRepository;\n    \n    public function __construct(UserRepository $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n    \n    public function index()\n    {\n        \/\/ 分页查询、返回分页对象\n        $paginate = $this->userRepository->paginate([\n            'name:like' => 'test', \n            'status'    => [1, 2], \/\/ 自动转换为 in 查询\n        ]);\n        \n        return view('users.index', compact('paginate'));\n    }\n    \n    public function create()\n    {\n        \/\/ 添加数据、返回 model->toArray()\n        $user = $this->userRepository->create(request()->all());\n        dump($user);\n    }\n    \n    public function update()\n    {\n        \/\/ 修改数据、返回受影响的行数\n        $row = $this->userRepository->update(request()->input('id'), request()->all());\n        dump($row);\n    }\n    \n    public function delete()\n    {\n        \/\/ 删除数据、返回受影响的行数\n        $row = $this->userRepository->delete(request()->input('id'));\n        dump($row);\n    }\n}\n\n```\n\n## 四、静态方法调用\n\n如果不想使用注入对象的方式调用的话，可以直接使用 `Repository` 对象静态方法 `instance()` 调用, 如下:\n\n```php\nuse Littlebug\\Repository\\Tests\\Stubs\\UserRepository;\n\n\/\/ 分页查询\n$paginate = UserRepository::instance()->paginate(['status' => 1]);\n\n\/\/ 查询一条数据\n$user = UserRepository::instance()->find(['status' => 1, 'id:gt' => 2]);\n```\n\n## 五、命令行工具说明\n\n> 如果需要指定数据库连接的名称，只需要在表名称前面添加数据库连接名称.就好 例如： --table=dev.users\n\n### 1. `core:model` 生成 `model` 类文件和 `repository` 类文件\n\n    ```bash\n    php artisan core:model --table=users --name=User\n    ```\n\n### 2. `core:repository` 单独生成 `repository` 类文件\n\n    ```bash\n    php artisan core:repository --model=User --name=UserRepository\n    ```\n\n### 3. `core:request` 生成 `request` 验证类文件，会通过表结构信息生成对应的验证\n\n    ```bash\n    php artisan core:request --table=users --path=Users\n    ```\n\n### 4. 命令行参数详情\n\n![commands of generate code](https:\/\/wanchaochao.github.io\/laravel-repository\/docs\/images\/commands-zh-cn.png 'core of commands')\n\n",
        "repository": "Repository The basic use\n==================\n\n[TOC]\n\n## 1、Create\n\nNew data\n\n```\npublic function create(array $data);\n```\n\n#### parameter\n- `$data` Added data (will automatically filter out non-table field information and is not allowed to be null)\n\n#### return value\n\n- `array` \n\n#### example\n\n```php\n$user = $this->repository->create([\n    'user_name' => 'Tony',\n    'age'       => 18,\n    'sex'       => 1,\n    'address'    => 'America'\n]);\n\n\/\/ create Method filters data from non-model fields, so you can use it directly: request()->all();\n$user = UserRepository::instance()->create(request()->all());\n```\n\n## 2、Update\n\n```\npublic function update($conditions, array $updateValues);\n```\n\n#### parameter\n- `$conditions` Modified conditions[Support for multiple types of queries](\/?page=repository#5、description-of%20query%20conditions)\n- `$updateValues` Modified data (non-table field information is automatically filtered out, and is not allowed to be null)\n\n#### return value\n- `int` affected rows\n\n#### example\n```php\n\/\/ A single modification of the primary key\n$row = $this->repository->update(1, ['user_name' => 'Tony', 'status' => 2]);\n\n\/\/ Primary key multiple modifications\n$row = $this->repository->update([1, 2, 3, 4], ['user_name' => 'Tony', 'status' => 2]);\n\n\/\/ Expression query modification\n$row = $this->repository->update([\n    'id:gt'  => 2,\n    'status' => 1,\n], ['user_name' => 'Tony', 'status' => 2]);\n```\n> Batch modification is used, **But you can use the modifier of the model**\n> `$conditions` Modify conditional support, primary keys, arrays, expressions\n\n## 3、Delete\n\nDeletes data and returns the number of affected rows\n\n```\npublic function update($conditions, array $updateValues);\n```\n\n#### parameter\n- `$conditions` Conditions for deletion [Support for multiple types of queries](\/?page=repository#5、description-of%20query%20conditions)\n\n#### return value\n- `int` affected rows\n\n```php\n\/\/ Primary key single delete\n$row = $this->repository->delete(1);\n\n\/\/ Primary key multiple deletes\n$row = $this->repository->delete([1, 2, 3, 4, 5]);\n\n\/\/ Expression array delete\n$row = $this->repository->delete(['id:gt' => 2, 'status' => 1]);\n```\n\n## 4、Query\n\nIn all query methods, `$conditions` represents the query condition and  `$columns` represents the query field\n\n### 4.1 find Query a single\n\n> `find($conditions, $columns = [])` \n\n```php\n\/\/ The primary key query\n$item = $this->repository->find(1);\n\n\/\/ Expression array query\n$item = $this->repository->find(['status' => 1, 'age:gt' => 2]);\n```\n\n> `findBy($conditions, $column)` Querying a single field\n\n```php\n$name = $this->repository->findBy(1, 'username');\n```\n\n### 4.2 findAll Query multiple\n\n> `findAll($conditions, $columns = [])` Query multiple\n\n```php\n\/\/ The primary key query\n$item = $this->repository->findAll([1, 2, 3, 4, 5]);\n\n\/\/ Expression array query\n$item = $this->repository->findAll(['status' => 1, 'age:gt' => 2, 'id' => [1, 2, 3, 4]]);\n```\n\n> `findAllBy($conditions, $column)` Querying a single field\n\n```php\n$names = $this->repository->findAllBy([1, 2, 3, 4], 'username');\n```\n\n### 4.3 paginate Paging query\n\n> `paginate($conditions, $columns = [], $size = 10, $current = null)` Paging queries that return paging objects\n\n#### parameter\n- `$conditions` Query conditions\n- `$columns`    Query field\n- `$size`       Represents the number of rows per page\n- `$current` Represents the current page (does not automatically get the `page` value of the request parameter)\n\n```php\n$pagination = $this->repository->paginate(['status' => 1], ['id', 'name', 'age', 'status']);\n```\n\n### 4.4 Filter null value queries\n\nIn our business scenarios, we often judge whether to add a specified condition based on the request parameters. For example, common background search list business：\n\n```php\n$conditions = [];\nif ($username = request()->input('username')) {\n    $conditions['username:like'] = $username;\n}\n\nif ($status = request()->input('status')) {\n    $conditions['status'] = $status;\n}\n\nif ($age = request()->input('age')) {\n    $conditions['age:gt'] = $age;\n}\n\n$pagination = $this->repositpory->paginate($conditions);\n```\n\nUse `filter` The serial approach simplifies our code， `filter` Series methods automatically filter out null values in query conditions; The above code is written using `filterPaginate`\n> Null characters, null, empty array, ' ' are considered null values\n\n```php\n$pagination = $this->repositpory->filterPaginate([\n    'username:like' => request()->input('username'),\n    'status'        => request()->input('status'),\n    'age:gt'        => request()->input('age'),\n]);\n```\n\nOther `filter` Methods:\n\n#### filterFind($conditions, $columns = []) Query a single piece of data\n#### filterFindBy($conditions, $column) Querying a single field\n#### filterFindAll($conditions, $columns = []) Query multiple data\n#### filterFindAllBy($conditions, $column) Query an array of individual fields\n\n## 5、Description of query conditions\n\nFor query conditions `$conditions` instructions,**includes modified and deleted query conditions**\n\n### 5.1 Primary key, array query\n\nDefine the way: `[key => value]` \n\n```php\n\/\/ Simple primary key query\n$user = $this->repositpory->find(1);\n\/\/ Array primary key query\n$users = $this->repositpory->findAll([1, 2, 3]);\n\/\/ [key => value] query\n$users = $this->repositpory->findAll([\n    'status' => 1,\n    'name'   => 'test',\n    'type'   => [1, 2, 3], \/\/ This will be automatically converted to an in query\n]);\n```\n\n### 5.2 Expression query\n\nQueries by defined expressions, or operators\n\n1. Expression definition: `['field:expression' => 'value']`\n2. Operator definition: `['field:operator' => 'value']`\n\n```php\n\/\/ Using expressions\n$user = $this->repositpory->findAll([\n    'parent_id:eq'       => 0,         \/\/ =\n    'status:in'          => [1, 2, 3], \/\/ in\n    'id:gt'              => 100,       \/\/ >\n    'age:lt'             => 35,        \/\/ <\n    'created_at:between' => [date('Y-m-d 00:00:00'), date('Y-m-d 23:59:59')],\n]);\n\n\/\/ Use operator\n$users = $this->repositpory->findAll([\n    'status:in'          => [1, 2, 3], \/\/ in\n    'id:>='              => 100,       \/\/ >\n    'age:<='             => 35,        \/\/ <\n    'created_at:between' => [date('Y-m-d 00:00:00'), date('Y-m-d 23:59:59')],\n]);\n```\n\n#### Currently supported expressions:\n\n| expression  | meaning                                  | Special instructions                                                                                        |\n| :---------- | :--------------------------------------- | :---------------------------------------------------------------------------------------------------------- |\n| eq          | equal(=)                                 |                                                                                                             |\n| neq         | not equal(!=)                            |                                                                                                             |\n| ne          | not equal(!=)                            |                                                                                                             |\n| gt          | greater(>)                               |                                                                                                             |\n| egt         | Greater than or equal to(>=)             |                                                                                                             |\n| gte         | Greater than or equal to(>=)             |                                                                                                             |\n| ge          | Greater than or equal to(>=)             |                                                                                                             |\n| lt          | less(<)                                  |                                                                                                             |\n| le          | Less than or equal to(<=)                |                                                                                                             |\n| lte         | Less than or equal to(<=)                |                                                                                                             |\n| elt         | Less than or equal to(<=)                |                                                                                                             |\n| in          | IN                                       | Incoming data is strongly converted to an array                                                             |\n| not in      | NOT IN                                   | Incoming data is strongly converted to an array                                                             |\n| not_in      | NOT IN                                   | Incoming data is strongly converted to an array                                                             |\n| between     | Range queries(between)                   | Incoming data is strongly converted to an array                                                             |\n| not_between | Non-interval query(not between)          | Incoming data is strongly converted to an array                                                             |\n| not between | Non-interval query(not between)          | Incoming data is strongly converted to an array                                                             |\n| like        | No fuzzy queries contain queries(like)   | Will automatically determine the addition of % fuzzy query; Incoming data is strongly converted to a string |\n| not_like    | Fuzzy queries are not included(not like) | Will automatically determine the addition of % fuzzy query; Incoming data is strongly converted to a string |\n| not like    | Fuzzy queries are not included(not like) | Will automatically determine the addition of % fuzzy query; Incoming data is strongly converted to a string |\n| rlike       | No fuzzy queries contain queries(rlike)  |                                                                                                             |\n| <>          | not equal(<>)                            |                                                                                                             |\n\n#### `like`, `not like` The query specification\n\n```php\n\/\/ Fuzzy queries before and after are not added, they are added automatically username like '%test%'\n$this->repository->findAll(['username:like' => 'test']);\n\n\/\/ Fuzzy queries with prefixes or suffixes are added, then not processed username like 'test%'\n$this->repository->findAll(['username:like' => 'test%']);\n\n\/\/ If the above like queries do not meet your needs, you can use native SQL queries\n$this->repository->findAll(['username' => DB::raw(\"like 'username'\")]);\n```\n\n### 5.3 Predefined field query\n\nSome of the predefined keys are for special queries\n\n```php\n$this->repository->findAll([\n    'limit' => 10,                        \/\/ Limit queries to 10\n    'order' => 'id desc, created_at asc', \/\/ Specify sort conditions\n    'group' => 'id',                      \/\/ Specify grouping information\n]);\n```\n\n#### Predefined fields\n\n| Field names        | Type       | Instructions                                |\n| --------------- | ----------------- | ----------------------------------- |\n| `and`           | `array`           | Add `and` query conditions; You can only pass one array |\n| `or`            | `array`           | Add `or` query conditions; You can only pass one array  |\n| `force`         | `string`          | Specify the index                      |\n| `order`         | `string or array` | Specify sort conditions                        |\n| `limit`         | `int`             | Specifies the number of query bars                        |\n| `offset`        | `int`             | Specify jump location                        |\n| `group`         | `string`          | Specify grouping fields                        |\n| `groupBy`       | `string`          | Specify grouping fields                        |\n| `join`          | `array`           | Query the parameters of `join`, multiple two-dimensional arrays       |\n| `leftJoin`      | `array`           | Query the parameters of `left join`, multiple two-dimensional arrays  |\n| `rightJoin`     | `array`           | Query the parameters of `right join`, multiple two-dimensional arrays |\n| `joinWith`      | `string or array` | `join` queries are matched by association relationships            |\n| `leftJoinWith`  | `string or array` | `left join` queries are matched by association relationships        |\n| `rightJoinWith` | `string or array` | `right join` queries are matched by association relationships       |\n\n#### `and`, `or` The query specification\n\nThe value must be an array, which is supported `[key => value]` 和 [表达式查询方式](\/?page=repository#5.2-表达式查询) The array;\nWhat joins represent the query criteria in the array\n\n> Support for nesting `and` and `or`\n\nexample：\n\n```php\n$this->repository->findAll([\n    'status' => 1,\n    'or'     => [\n        'username:like' => 'test',\n        'age:gt'        => 10,\n        'and'           => [\n            'user_id' => [1, 2, 3],\n            'gener'   => 1,\n        ],\n    ]\n]);\n```\n\nExecute SQL:\n\n```SQL\nselect `users`.*\nfrom `users`\nwhere `users`.`status` = 1 and (\n    `users`.`username` like '%test%' or\n    `users`.`age` > 10 or\n    (\n        `users`.`user_id` in (1, 2, 3) and\n        `users`.`gener` = 1\n    )\n)\n```\n\n### 5.4 Association relation join query\n\n>The premise is that your model defines the relationships of the tables\n\nFor example, the following：\n\nUser Model\n\n```php\n<?php\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    public function ext()\n    {\n        return $this->hasOne(UserExt::class, 'user_id', 'user_id');\n    }\n}\n```\n\nUser Ext Model\n\n```php\n<?php\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass UserExt extends Model\n{\n    public function user()\n    {\n        return $this->hasOne(User::class, 'user_id', 'user_id');\n    }\n}\n```\n\nThen when you query, you can join query by association relation (by defining the association relation, you can automatically process your join).\n\n```php\n\n\/\/ userRepository\nUserRepository::instance()->findAll([\n    'status'   => 1,\n    'joinWith' => 'ext', \/\/ ext Represents the name of the associated method, multiple of which require an array ['ext', 'children']\n]);\n\n```\n执行的SQL:\n```SQL\nselect `users`.* from `users` inner join `user_ext` on (`users`.`user_id` = `user_ext`.`user_id`) where `users`.`status` = 1\n```\n\n```php\n\/\/ userExtRepository\nUserExtRepository::instance()->findAll([\n    'status'   => 1,\n    'joinWith' => 'user',\n]);\n```\n\nExecute SQL:\n```SQL\nselect `user_ext`.* from `user_ext` inner join `users` on (`users`.`user_id` = `user_ext`.`user_id`) where `user_ext`.`status` = 1\n```\n\n##### leftJoinWith 和 rightJoinWith\n\n>If you want to use `left join` or `right join` you can just use `leftJoinWith` or `rightJoinWith`\n\n##### Add join queries to query conditions\n\nthrough：`['table name.field' => 'value']`\n\n```php\nUserRepository::instance()->findAll([\n    'status'                 => 1,\n    'joinWith'               => 'ext',\n    'user_ext.status:neq'    => 1,\n    'user_ext.created_at:gt' => date('Y-m-d H:i:s')\n]);\n```\nExecute SQL:\n```SQL:\nselect `users`.* from `users` inner join `user_ext` on (`users`.`user_id` = `user_ext`.`user_id`) where `users`.`status` = 1 and `user_ext`.`status` != 1 and `user_ext`.`created_at` > '2020-04-29 22:31:00'\n```\n\n##### Alias the join table\n\nthrough： `['alias' => 'Related party method name']`\n\n```php\n\nUserRepository::instance()->findAll([\n    'status'           => 1,\n    'joinWith'         => ['t1' => 'ext'],\n    't1.status:neq'    => 1,\n    't1.created_at:gt' => date('Y-m-d H:i:s')\n]);\n```\n\nExecute SQL:\n```SQL\nselect `users`.* from `users` inner join `user_ext` AS `t1` on (`users`.`user_id` = `t1`.`user_id`) where `users`.`status` = 1 and `t1`.`status` != 1 and `t1`.`created_at` > '2020-04-29 22:31:00'\n```\n\n### 5.5 Associative query additional conditions\n\n**Remember that an associated query is not a join query** an associated query is a query for the main table after the completion of the query, through the definition of the association and then to query the associated table, is the execution of two SQL\n\nDefine the way： `['rel.Associate method name.field' => 'value']`\n\n```php\nUserRepository::instance()->find([\n    'user_id'        => 1,\n    'rel.ext.status' => 1, \/\/ Add a condition for the associated table query\n    'rel.ext.type'   => 2, \/\/ Add a condition for the associated table query\n], ['*', 'ext' => ['*']]);\n\n```\n\nExecute SQL\n\n1. The main query\n```SQL\nselect `users`.* from `users` where `users`.`user_id` = 1\n```\n\n2. Associative table query\n```SQL\nselect `user_ext`.* from `user_ext` where `user_id` in (1) and `user_ext`.`status` = 1 and `user_ext`.`type` = 1\n```\n\n### 5.6 join query\n\nuse join query\n\n```php\nUserRepository::instance()->findAll([\n    'status'                 => 1,\n    'join'                   => ['user_ext', 'users.user_id', '=', 'user_ext.user_id'],\n    'user_ext.status:neq'    => 1,\n    'user_ext.created_at:gt' => date('Y-m-d H:i:s')\n]);\n```\n\nExecute SQL:\n```SQL\nselect `users`.* from `users` inner join `user_ext` on (`users`.`user_id` = `user_ext`.`user_id`) where `users`.`status` = 1 and `user_ext`.`status` != 1 and `user_ext`.`created_at` > '2020-04-29 22:31:00'\n```\n\n##### leftJoin and rightJoin\n\n>Just use `leftJoin` or `rightJoin`\n\n#### Multiple joins exist at once\n\nYou need to define the join as a two-dimensional array\n\n```php\nUserRepository::instance()->findAll([\n    'join'=> [\n        ['user_ext', 'users.user_id', '=', 'user_ext.user_id'],\n        ['users as t1', 'users.user_id', '=', 't1.user_id']\n    ],\n]);\n```\n\nExecute SQL:\n```SQL\nselect `users`.* from `users` inner join `user_ext` on (`users`.`user_id` = `user_ext`.`user_id`) inner join `users` as `t1` on (`users`.`user_id` = `t1`.`user_id`)\n```\n### 5.7 scope query\n\nYou need a query method where `Model` defines the `scope` prefix\n\n```php\n<?php\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    public function scopeUsername($query, $username)\n    {\n        return $query->where('name', 'like', $username);\n    }\n\n    public function scopeJoinExt($query, $status)\n    {\n        return $query->join('user_ext', 'users.user_id', '=', 'user_ext.user_id')->where('user_ext.status', $status);\n    }\n}\n```\n\nDefine the way：`['Remove the scope prefix from the method name' => 'Required parameters']`\n\n```php\nUserRepository::instance()->findAll([\n    'username' => 'test',\n    'joinExt'  => 1,\n]);\n```\n\nExecute SQL:\n```SQL\nselect `users`.* from `users` inner join `user_ext` on (`users`.`user_id` = `user_ext`.`user_id`) where `name` like 'test' and `user_ext`.`status` = 1\n```\n\n### 5.8 Native SQL query\n\n> Careful; There are SQL injection risks\n\nWrap the query condition with the: `DB::raw()` function\n\n```php\nUserRepository::instance()->findAll([\n    DB::raw(\"user_id = 1 and status = 1\"),\n    'name' => DB::raw('like \"_test\"'),\n]);\n```\n\n### conclusion\n```php\n$conditions = [\n    \/\/ The fields in the table are precisely queried\n    'status' => 1,\n    'id'     => [1, 2, 3, 4], \/\/ An array value is automatically converted to an in query `id` in (1, 2, 3, 4)\n\n    \/\/ Predefined field query\n    'order' => 'id desc', \/\/ Specify the sort field and how\n    'limit' => 10,        \/\/ Restrict query conditions\n    'group' => 'id',      \/\/ Specify grouping conditions\n    'force' => 'name',    \/\/ Specify the index to use\n\n    \/\/ join Associated query\n    'join'     => ['users', 'users.user_id', '=', 'orders.user_id'],\n    'leftJoin' => [\n        \/\/ multiple leftJoin\n        ['users as u1', 'u1.user_id', '=', 'orders.user_id'],\n        ['user_image', 'users_image.user_id', '=', 'users.user_id'],\n    ],\n\n    \/\/ Expression query\n    'username:like'      => 'test',\n    'created_at:between' => ['2019-01-02 00:00:00', '2019-01-03 23:59:59'],\n    'id:ge'              => 12, \/\/ id > 12\n\n    \/\/ relation The query condition restricts only the current relation association query\n    'rel.ext.address:like'   => '北京',\n    'rel.ext.created_at:gte' => '2019-01-01 00:00:00',\n\n    \/\/ Add join queries through a relation relation\n    'joinWith'     => ['ext'],\n    \/\/ The associative table defines the alias, if there is no alias, the associative table and the main table have the same name, use the custom alias' t1 ', multiple homonyms with this address 't2', 't3'\n    'leftJoinWith' => ['alias' => 'children'],\n\n    \/\/ Add a condition to the join table query\n    'user_ext.status' => 1,\n    'users.status'    => 1,\n\n    \/\/ scope Custom query\n    'address'  => '北京',      \/\/ search `scopeAddress($query, $address)` method\n    'children' => [1, 2, 3],  \/\/ search `scopeChildren($query, $childrenIds)` method\n];\n```\n\n>If the query field in > does not match the nine methods described above, the query field is converted to the method name, and the query value is a parameter that directly calls the method 'Illuminate, Database, Eloquent Builder'\n (** if the field method does not exist and the program throws incorrectly **, this is different from version 1.0.*) for example:\n\n```php\nUserRepository::instance()->findAll([\n    'with'        => ['ext', 'children'],\n    'orderByDesc' => 'id',\n    'limit'       => 10,\n]);\n\n\/\/ Internal actual call\n\/\/ $query->with(['ext', 'children'])->orderByDesc('id')->limit(10);\n```\n\n## 6、Query field description\n\nQuery field `$columns`, is the field of select\n\n### 6.1 Query the fields in this table\n\nThe fields in this table are written directly\n\n```php\n\/\/ select `user_id`, `name` from `users` where `user_id` = 1\n$this->userRepository->find(1, ['user_id', 'name']);\n```\n\n### 6.2 Query the associated table fields\n\n>`model` The association relationships that need to be defined\n\nthrough： `['Correlation method' => ['Field information']]`\n\n```php\n$this->userRepository->find(1, ['user_id', 'name', 'ext' => ['status', 'avatar', 'auth_id']]);\n```\n\n### 6.3 Query associated table statistics\n\n>`model` The association relationships that need to be defined\n\nthrough： `['Correlation method_count']`\n\n```php\n$this->userRepository->find(1, ['user_id', 'name','ext_count']);\n```\n\/\/ We're using the `withCount()` method of `model`\n```php\n\/\/ `model`\nUser::select(['user_id', 'name'])->withCount('ext')->where('user_id', 1)->first()->toArray();\n```\n### 6.4 Query the join table field\n\n```php\n$this->userRepository->find([\n    'joinWith' => 'ext',\n], ['user_id', 'name', 'user_ext.status']);\n```\n\n### 6.5 Query native SQL fields\n\n```php\n$this->userRepository->find([\n    'status' => 1,\n], [\n    DB::raw('COUNT(*) AS `count_number`'),\n    DB::raw('MAX(`user_id`) AS `max_user_id`'),\n    DB::raw('AVG(`age`) AS `avg_age`'),\n]);\n```\n\n### 6.6 conclusion\n\n```php\n$columns = [\n\n    \/\/ Field queries for this table\n    'id',\n    'username',\n\n    \/\/ Associate a table field query\n    'ext'      => ['*'], \/\/ The `ext` association that corresponds to the `model` definition\n    'children' => ['*'], \/\/ The `children` association that corresponds to the `model` definition\n\n    \/\/ Correlate table statistics field queries\n    'ext_count',      \/\/ The `ext` association that corresponds to the `model` definition\n    'children_count', \/\/ The `children` association that corresponds to the `model` definition\n\n    \/\/ The join table field\n    'users.username',\n    'users.age',\n\n    \/\/ Native SQL field\n    DB::raw('SUM(`users`.`age`) AS `sum_age`'),\n    DB::raw('COUNT(*) AS `total_count`'),\n];\n```\n\n## 7、Create, delete and modify the event method\n\nIf you want to prevent the main method from executing and have the main method return an error, just throw the error\n\n### 7.1 The new event is triggered when `create($data)` is executed\n\n1. `beforeCreate($data)` Before the new\n\n2. `afterCreate($data, $news)`  After the new\n\n#### 7.1.1 Parameters\n\n| Parameter name| Type | Instructions                               |\n| -------- | -------- | -------------------------------------- |\n| `$data`  | `array`  | Filters out arrays that interfere with data (data that is not a field in a table) |\n| `$news`  | `array`  | New successful call to `model->toArray()` array   |\n\n### 7.2 The modified event is triggered when `update($conditions, array $data)` executes\n\n1. `beforeUpdate($conditions, $data)` Before the update\n\n2. `afterUpdate($conditions, $data, $row)` After the update\n\n#### 7.2.1 Parameters\n\n| Parameter name| Type | Instructions                               |\n| ------------- | -------- | -------------------------------------- |\n| `$conditions` | `array`  | The query condition array after the primary key query is processed         |\n| `$data`       | `array`  | Filters out arrays that interfere with data (data that is not a field in a table) |\n| `$row`        | `int`    | Number of affected rows                       |\n\n### 7.3 The deleted event is triggered when `delete($conditions)` is executed\n\n1. `beforeDelete($conditions)` Before the delete\n\n2. `afterDelete($conditions, $row)` After the delete\n\n#### 7.3.1 Parameters\n\n| Parameter name| Type | Instructions                               |\n| ------------- | -------- | ------------------------------ |\n| `$conditions` | `array`  | The query condition array after the primary key query is processed |\n| `$row`        | `int`    | Number of affected rows               |\n\n### 7.4 Processing of primary key queries about `$conditions`\n\nNon-empty strings, integers, floating point Numbers, and indexed arrays are all turned into primary key queries\n\n```php\n\/\/ Assume that the primary key name of the table is id\n$conditions = 1;            \/\/ ['id' => 1]\n$conditions = '1';          \/\/ ['id' => 1]\n$conditions = [1, 2, 3];    \/\/ ['id' => [1, 2, 3, 4]]\n```\n\n## 8、Other instructions\n\n### 8.1 Other instructions\n\n#### 8.1.1 Query the method that returns the array\n\n>So we're going to return `model->toArray()`\n\n##### create(array $data)\n##### find($conditions, $columns = [])\n##### findAll($conditions, $columns = [])\n\n#### 8.1.2 Returns the method of the object\n>Returns a model object or collection\n\n##### first($conditions, $columns = [])\n##### firstOrFail($conditions, $columns = [])\n##### firstOrCreate($attributes, $values)\n##### updateOrCreate($attributes, $values)\n##### get($conditions, $columns = [])\n##### pluck($conditions, $column, $key = null)\n\n### 8.2 Requirements for `model`\n\n1. `create` and ` update ` are batch assignment, need a `model` define batch assignment whitelist `$fillable` or blacklist `$guarded`\n2. Need to define the `$columns` field information to indicate which fields are in the table\n\n```php\nclass Posts extends \\Illuminate\\Database\\Eloquent\\Model\n{\n    public $guarded = ['id'];\n\n    public $columns = [\n        'id',\n        'title',\n        'content',\n        'created_at',\n        'updated_at'\n    ];\n}\n\n```\n\n>Although this step is not required, defining `$columns` will reduce the cost of a `SQL` query",
        "repository.zh-CN": "Repository 基本使用\n==================\n\n[TOC]\n\n## 一、新增数据\n使用 `create(array $data)` 方法, 返回的 `model->toArray()` 数组\n\n```\npublic function create(array $data);\n```\n\n#### 参数\n- `$data` 添加的数据(会自动过滤掉非表中字段信息，不允许为空)\n\n#### 返回值\n- `array` 返回数组\n\n#### 示例\n\n```php\n$user = $this->repository->create([\n    'user_name' => 'Tony',\n    'age'       => 18,\n    'sex'       => 1,\n    'address'    => 'America'\n]);\n\n\/\/ create 方法能够过滤非model字段的数据、所以你可以直接使用request()->all();\n$user = UserRepository::instance()->create(request()->all());\n```\n\n## 二、修改数据\n\n```\npublic function update($conditions, array $updateValues);\n```\n\n#### 参数\n- `$conditions` 修改的条件;[支持多种方式查询](\/?page=repository#五、查询条件说明)\n- `$updateValues` 修改的数据(会自动过滤掉非表中字段信息，不允许为空)\n\n#### 返回值\n- `int` 受影响的行数\n\n#### 示例\n```php\n\/\/ 主键单个修改\n$row = $this->repository->update(1, ['user_name' => 'Tony', 'status' => 2]);\n\n\/\/ 主键多个修改\n$row = $this->repository->update([1, 2, 3, 4], ['user_name' => 'Tony', 'status' => 2]);\n\n\/\/ 表达式查询修改\n$row = $this->repository->update([\n    'id:gt'  => 2,  \n    'status' => 1,\n], ['user_name' => 'Tony', 'status' => 2]);\n```\n> 使用的是批量修改方式，但**能够使用模型的修改器**\n> `$conditions` 修改条件支持，主键、数组、表达式\n\n## 三、删除数据\n\n删除数据、返回受影响行数\n\n```\npublic function delete($conditions, array $updateValues);\n```\n\n#### 参数\n- `$conditions` 删除的条件;[支持多种方式查询](\/?page=repository#五、查询条件说明)\n\n#### 返回值\n- `int` 受影响的行数\n\n```php\n\/\/ 主键单个删除\n$row = $this->repository->delete(1);\n\n\/\/ 主键多个删除\n$row = $this->repository->delete([1, 2, 3, 4, 5]);\n\n\/\/ 表达式数组删除\n$row = $this->repository->delete(['id:gt' => 2, 'status' => 1]);\n```\n\n## 四、查询数据\n\n所有查询方法中 `$conditions` 表示查询条件， `$columns` 表示查询字段\n\n### 4.1 find 查询单个\n\n> `find($conditions, $columns = [])` 查询单条数据\n\n```php\n\/\/ 主键查询\n$item = $this->repository->find(1); \n\n\/\/ 表达式数组查询\n$item = $this->repository->find(['status' => 1, 'age:gt' => 2]); \n```\n\n> `findBy($conditions, $column)` 查询单个字段\n\n```php\n$name = $this->repository->findBy(1, 'username');\n```\n\n### 4.2 findAll 查询多个\n\n> `findAll($conditions, $columns = [])` 查询多条数据\n\n```php\n\/\/ 主键查询\n$item = $this->repository->findAll([1, 2, 3, 4, 5]); \n\n\/\/ 表达式数组查询\n$item = $this->repository->findAll(['status' => 1, 'age:gt' => 2, 'id' => [1, 2, 3, 4]]); \n```\n\n> `findAllBy($conditions, $column)` 查询单个字段\n\n```php\n$names = $this->repository->findAllBy([1, 2, 3, 4], 'username');\n```\n\n### 4.3 paginate 分页查询\n\n> `paginate($conditions, $columns = [], $size = 10, $current = null)` 分页查询， 返回分页对象\n> `$size` 表示每页多少条 `$current` 表示当前页(不传自动获取请求参数的 `page` 的值)\n\n```php\n$pagination = $this->repository->paginate(['status' => 1], ['id', 'name', 'age', 'status']);\n```\n\n### 4.4 filter过滤空值查询\n\n在我们业务场景中，经常会根据请求参数来判断是否添加指定条件；例如常见的后台搜索列表业务中：\n\n```php\n$conditions = [];\nif ($username = request()->input('username')) {\n    $conditions['username:like'] = $username;\n}\n\nif ($status = request()->input('status')) {\n    $conditions['status'] = $status;\n}\n\nif ($age = request()->input('age')) {\n    $conditions['age:gt'] = $age;\n}\n\n$pagination = $this->repositpory->paginate($conditions);\n```\n\n使用 `filter` 系列方法可以简化我们的代码， `filter` 系列方法会自动过滤掉查询条件中的空值；上述代码使用 `filterPaginate`写法\n> 空字符，null, 空数组、' ' 会被认为是空值\n\n```php\n$pagination = $this->repositpory->filterPaginate([\n    'username:like' => request()->input('username'),\n    'status'        => request()->input('status'),\n    'age:gt'        => request()->input('age'),\n]);\n```\n\n其他`filter`系列方法:\n\n#### filterFind($conditions, $columns = []) 查询单条数据\n#### filterFindBy($conditions, $column) 查询单个字段\n#### filterFindAll($conditions, $columns = []) 查询多条数据\n#### filterFindAllBy($conditions, $column) 查询单个字段数组\n\n## 五、查询条件说明\n\n对于查询条件 `$conditions` 说明,**包括修改和删除的查询条件**\n\n### 5.1 主键、数组查询\n\n就是简单的 `[key => value]` 数组方式\n\n```php\n\/\/ 简单主键查询\n$user = $this->repositpory->find(1);\n\/\/ 数组主键查询\n$users = $this->repositpory->findAll([1, 2, 3]);\n\/\/ 简单[key => value]查询\n$users = $this->repositpory->findAll([\n    'status' => 1,\n    'name'   => 'test',\n    'type'   => [1, 2, 3], \/\/ 会自动转为 in 查询\n]);\n```\n\n### 5.2 表达式查询\n\n通过定义的表达式、或者操作符查询\n\n1. 表达式定义方式：`['查询字段:表达式' => '查询值']`\n2. 操作符定义方式：`['查询字段:操作符' => '查询值']`\n\n```php\n\/\/ 使用表达式\n$user = $this->repositpory->findAll([\n    'parent_id:eq'       => 0,         \/\/ =\n    'status:in'          => [1, 2, 3], \/\/ in\n    'id:gt'              => 100,       \/\/ >\n    'age:lt'             => 35,        \/\/ <\n    'created_at:between' => [date('Y-m-d 00:00:00'), date('Y-m-d 23:59:59')],\n]);\n\n\/\/ 使用操作符\n$users = $this->repositpory->findAll([\n    'status:in'          => [1, 2, 3], \/\/ in\n    'id:>='              => 100,       \/\/ >\n    'age:<='             => 35,        \/\/ <\n    'created_at:between' => [date('Y-m-d 00:00:00'), date('Y-m-d 23:59:59')],\n]);\n```\n\n#### 目前支持的表达式：\n\n| 表达式      | 含义                      | 特别说明                                          |\n| :---------- | :------------------------ | :------------------------------------------------ |\n| eq          | 等于(=)                   |                                                   |\n| neq         | 不等于(!=)                |                                                   |\n| ne          | 不等于(!=)                |                                                   |\n| gt          | 大于(>)                   |                                                   |\n| egt         | 大于等于(>=)              |                                                   |\n| gte         | 大于等于(>=)              |                                                   |\n| ge          | 大于等于(>=)              |                                                   |\n| lt          | 小于(<)                   |                                                   |\n| le          | 小于等于(<=)              |                                                   |\n| lte         | 小于等于(<=)              |                                                   |\n| elt         | 小于等于(<=)              |                                                   |\n| in          | IN 查询                   | 传入数据会强转为数组                              |\n| not in      | NOT IN 查询               | 传入数据会强转为数组                              |\n| not_in      | NOT IN 查询               | 传入数据会强转为数组                              |\n| between     | 区间查询(between)         | 传入数据会强转为数组                              |\n| not_between | 不在区间查询(not between) | 传入数据会强转为数组                              |\n| not between | 不在区间查询(not between) | 传入数据会强转为数组                              |\n| like        | 模糊查询包含(like)        | 会自动判断添加 % 模糊查询；传入数据会强转为字符串 |\n| not_like    | 模糊查询不包含(not like)  | 会自动判断添加 % 模糊查询；传入数据会强转为字符串 |\n| not like    | 模糊查询不包含(not like)  | 会自动判断添加 % 模糊查询；传入数据会强转为字符串 |\n| rlike       | 模糊查询包含(rlike)       |                                                   |\n| <>          | 不等于(<>)                |                                                   |\n\n#### `like`, `not_like` 查询说明\n\n```php\n\/\/ 没有添加前后模糊查询，会自动加上 username like '%test%'\n$this->repository->findAll(['username:like' => 'test']); \n\n\/\/ 添加了前缀或者后缀模糊查询，那么不处理 username like 'test%'\n$this->repository->findAll(['username:like' => 'test%']);\n\n\/\/ 如果上述like的查询不满足你的需求，可以使用原生SQL查询\n$this->repository->findAll(['username' => DB::raw(\"like 'username'\")]);\n```\n\n### 5.3 预定义字段查询\n\n有些预定义的 key 是做特殊查询用的\n\n```php\n$this->repository->findAll([\n    'limit' => 10,                        \/\/ 限制查询10条\n    'order' => 'id desc, created_at asc', \/\/ 指定排序条件\n    'group' => 'id',                      \/\/ 通过 id 分组\n]);\n```\n\n#### 预定义的字段\n\n| 字段名称        | 字段值类型        | 说明                                |\n| --------------- | ----------------- | ----------------------------------- |\n| `and`           | `array`           | 添加`and`查询条件; 只能传递一个数组 |\n| `or`            | `array`           | 添加`or`查询条件; 只能传递一个数组  |\n| `force`         | `string`          | 强制走指定索引                      |\n| `order`         | `string or array` | 指定排序条件                        |\n| `limit`         | `int`             | 指定查询条数                        |\n| `offset`        | `int`             | 指定跳转位置                        |\n| `group`         | `string`          | 指定分组字段                        |\n| `groupBy`       | `string`          | 指定分组字段                        |\n| `join`          | `array`           | 查询join的参数，多个二维数组        |\n| `leftJoin`      | `array`           | 查询`leftJoin`的参数、多个二维数组  |\n| `rightJoin`     | `array`           | 查询`rightJoin`的参数、多个二维数组 |\n| `joinWith`      | `string or array` | 通过关联关系对应join查询            |\n| `leftJoinWith`  | `string or array` | 通过关联关系对应leftJoin查询        |\n| `rightJoinWith` | `string or array` | 通过关联关系对应rightJoin查询       |\n\n#### `and`, `or` 查询说明\n\n值必须为一个数组，里面支持`[key => value]` 和 [表达式查询方式](\/?page=repository#5.2-表达式查询)的数组；表示数组里面的查询条件通过什么连接\n\n> 支持嵌套使用 `and` 和 `or`\n\n示例：\n\n```php\n$this->repository->findAll([\n    'status' => 1,\n    'or'     => [\n        'username:like' => 'test',\n        'age:gt'        => 10,\n        'and'           => [\n            'user_id' => [1, 2, 3],\n            'gener'   => 1,\n        ],\n    ]\n]);\n```\n\n执行SQL:\n\n```SQL\nselect `users`.* \nfrom `users` \nwhere `users`.`status` = 1 and (\n    `users`.`username` like '%test%' or  \n    `users`.`age` > 10 or \n    (\n        `users`.`user_id` in (1, 2, 3) and \n        `users`.`gener` = 1\n    )\n)  \n```\n\n### 5.4 关联关系join查询\n\n>前提是你的model定义了表的关联\n\n例如下面：\n\n用户Model\n```php\n<?php\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    public function ext()\n    {\n        return $this->hasOne(UserExt::class, 'user_id', 'user_id');\n    }\n}\n```\n\n用户扩展信息Model\n\n```php\n<?php\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass UserExt extends Model\n{\n    public function user()\n    {\n        return $this->hasOne(User::class, 'user_id', 'user_id');\n    }\n}\n```\n\n那么你在查询的时候可以通过关联关系进行join 查询(通过定义关联的关系，自动处理你的join)\n\n```php\n\n\/\/ userRepository  \nUserRepostiory::instance()->findAll([\n    'status'   => 1,\n    'joinWith' => 'ext', \/\/ ext 表示关联方法名称， 多个需要使用数组 ['ext', 'children']\n]);\n\n```\n执行的SQL: \n```SQL\nselect `users`.* from `users` inner join `user_ext` on (`users`.`user_id` = `user_ext`.`user_id`) where `users`.`status` = 1\n```\n\n```php\n\/\/ userExtRepository \nUserExtRepository::instance()->findAll([\n    'status'   => 1,\n    'joinWith' => 'user',\n]);\n```\n\n执行的SQL: \n```SQL\nselect `user_ext`.* from `user_ext` inner join `users` on (`users`.`user_id` = `user_ext`.`user_id`) where `user_ext`.`status` = 1\n```\n\n##### leftJoinWith 和 rightJoinWith\n\n>如果需要使用 `leftJoin` 或者 `rightJoin` 的使用 `leftJoinWith` 或者 `rightJoinWith` 就好了\n\n##### 添加join查询查询条件\n\n通过：`['表名字.字段' => '查询值']`\n\n```php\nUserRepostiory::instance()->findAll([\n    'status'                 => 1,\n    'joinWith'               => 'ext',\n    'user_ext.status:neq'    => 1,\n    'user_ext.created_at:gt' => date('Y-m-d H:i:s')\n]);\n```\n执行的SQL: \n```SQL: \nselect `users`.* from `users` inner join `user_ext` on (`users`.`user_id` = `user_ext`.`user_id`) where `users`.`status` = 1 and `user_ext`.`status` != 1 and `user_ext`.`created_at` > '2020-04-29 22:31:00'\n```\n\n##### 给join表命别名\n\n通过： `['别名' => '关联方法名']`\n\n```php\n\nUserRepostiory::instance()->findAll([\n    'status'           => 1,\n    'joinWith'         => ['t1' => 'ext'],\n    't1.status:neq'    => 1,\n    't1.created_at:gt' => date('Y-m-d H:i:s')\n]);\n```\n\n执行的SQL: \n```SQL\nselect `users`.* from `users` inner join `user_ext` AS `t1` on (`users`.`user_id` = `t1`.`user_id`) where `users`.`status` = 1 and `t1`.`status` != 1 and `t1`.`created_at` > '2020-04-29 22:31:00'\n```\n\n### 5.5 关联查询附加条件\n\n**切记关联查询不是join查询** 关联查询是主表查询完成后，通过定义的关联然后再去查询关联表，是执行了两条SQL\n\n定义方式： `['rel.关联方法名称.关联表字段' => '查询的值']`\n\n[Model 使用 5.4 定义的model](\/?page=repository#5.4-使用关联关系join查询)\n\n```php\nUserRepostiory::instance()->find([\n    'user_id'        => 1,\n    'rel.ext.status' => 1, \/\/ 为关联表查询添加条件\n    'rel.ext.type'   => 2, \/\/ 为关联表查询添加条件\n], ['*', 'ext' => ['*']]);\n\n```\n\n最终执行的SQL\n\n1. 主表查询\n```SQL\nselect `users`.* from `users` where `users`.`user_id` = 1\n```\n\n2. 关联表查询\n```SQL\nselect `user_ext`.* from `user_ext` where `user_id` in (1) and `user_ext`.`status` = 1 and `user_ext`.`type` = 1\n```\n\n### 5.6 join 查询\n\n使用 join 查询\n\n```php\nUserRepostiory::instance()->findAll([\n    'status'                 => 1,\n    'join'                   => ['user_ext', 'users.user_id', '=', 'user_ext.user_id'],\n    'user_ext.status:neq'    => 1,\n    'user_ext.created_at:gt' => date('Y-m-d H:i:s')\n]);\n```\n\n执行SQL: \n```SQL\nselect `users`.* from `users` inner join `user_ext` on (`users`.`user_id` = `user_ext`.`user_id`) where `users`.`status` = 1 and `user_ext`.`status` != 1 and `user_ext`.`created_at` > '2020-04-29 22:31:00'\n```\n\n##### leftJoin 和 rightJoin\n\n>直接使用 `leftJoin` 或者 `rightJoin` 就好了\n\n#### 一次存在多个join\n\n需要将join定义为二维数组\n\n```php\nUserRepostiory::instance()->findAll([\n    'join'=> [\n        ['user_ext', 'users.user_id', '=', 'user_ext.user_id'],\n        ['users as t1', 'users.user_id', '=', 't1.user_id']\n    ],\n]);\n```\n\n执行SQL: \n```SQL\nselect `users`.* from `users` inner join `user_ext` on (`users`.`user_id` = `user_ext`.`user_id`) inner join `users` as `t1` on (`users`.`user_id` = `t1`.`user_id`)\n```\n### 5.7 scope 查询\n\n需要 `Model` 定义了 `scope` 前缀的查询方法\n\n```php\n<?php\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    public function scopeUsername($query, $username)\n    {\n        return $query->where('name', 'like', $username);\n    }\n\n    public function scopeJoinExt($query, $status)\n    {\n        return $query->join('user_ext', 'users.user_id', '=', 'user_ext.user_id')->where('user_ext.status', $status);\n    }\n}\n```\n\n定义方式：`['去掉scope前缀方法名称' => '需要的参数']`\n\n```php \nUserRepostiory::instance()->findAll([\n    'username' => 'test',\n    'joinExt'  => 1,\n]);\n```\n\n执行的SQL:\n```SQL\nselect `users`.* from `users` inner join `user_ext` on (`users`.`user_id` = `user_ext`.`user_id`) where `name` like 'test' and `user_ext`.`status` = 1\n```\n\n### 5.8 原生SQL查询\n\n> 慎用；存在SQL注入风险\n\n使用：DB::raw() 函数包裹查询条件\n\n```php \nUserRepostiory::instance()->findAll([\n    DB::raw(\"user_id = 1 and status = 1\"),\n    'name' => DB::raw('like \"_test\"'),\n]);\n```\n\n### 总结\n```php\n$conditions = [\n    \/\/ 表中字段精准查询\n    'status' => 1,\n    'id'     => [1, 2, 3, 4], \/\/ 值为数组会自动转为in查询 `id` in (1, 2, 3, 4)\n    \n    \/\/ 预定义字段查询\n    'order' => 'id desc', \/\/ 指定排序字段和方式\n    'limit' => 10,        \/\/ 限制查询条件\n    'group' => 'id',      \/\/ 指定分组条件\n    'force' => 'name',    \/\/ 指定使用的索引\n  \n    \/\/ join 关联查询\n    'join'     => ['users', 'users.user_id', '=', 'orders.user_id'],\n    'leftJoin' => [\n        \/\/ 多个leftJoin\n        ['users as u1', 'u1.user_id', '=', 'orders.user_id'],\n        ['user_image', 'users_image.user_id', '=', 'users.user_id'],\n    ],\n\n    \/\/ 表达式查询\n    'username:like'      => 'test',                                         \/\/ 模糊查询\n    'created_at:between' => ['2019-01-02 00:00:00', '2019-01-03 23:59:59'], \/\/ 区间查询\n    'id:ge'              => 12, \/\/ id > 12\n    \n    \/\/ relation 关联查询,查询条件只对当前relation关联查询限制 \n    'rel.ext.address:like'   => '北京',\n    'rel.ext.created_at:gte' => '2019-01-01 00:00:00',\n    \n    \/\/ 通过 relation 关联关系，添加join 查询\n    'joinWith'     => ['ext'],\n    \/\/ 关联表定义别名 alias, 如果没有别名，关联表和主表同名，使用自定义别名 `t1`, 多个同名以此地址 `t2`、`t3`\n    'leftJoinWith' => ['alias' => 'children'], \n\n    \/\/ 为join连表查询添加条件 \n    'user_ext.status' => 1,\n    'users.status'    => 1,\n    \n    \/\/ scope 自定义查询\n    'address'  => '北京',      \/\/ 查找`scopeAddress($query, $address)`方法\n    'children' => [1, 2, 3],  \/\/ 查找`scopeChildren($query, $childrenIds)`方法\n];\n```\n\n>如果查询字段匹配不到上述的9种方式，那么会将查询字段转为方法名称，查询值为参数直接调用`Illuminate\\Database\\Eloquent\\Builder`的方法（**如果字段方法不存在、程序抛错**, 这一点有别于 1.0.* 版本） 例如：\n\n```php\nUserRepostiory::instance()->findAll([\n    'with'        => ['ext', 'children'],\n    'orderByDesc' => 'id',\n    'limit'       => 10,\n]);\n\n\/\/ 内部实际调用\n\/\/ $query->with(['ext', 'children'])->orderByDesc('id')->limit(10);\n```\n\n## 六、查询字段说明\n\n对查询字段 `$columns` 说明, 就是 select 的字段\n\n### 6.1 查询本表字段\n\n本表的字段直接写\n\n```php\n\/\/ select `user_id`, `name` from `users` where `user_id` = 1\n$this->userRepostiory->find(1, ['user_id', 'name']);\n```\n\n### 6.2 查询关联表字段\n\n>model 需要定义的关联关系\n\n通过： `['关联方法' => ['字段信息']]`\n\n```php\n$this->userRepostiory->find(1, ['user_id', 'name', 'ext' => ['status', 'avatar', 'auth_id']]);\n```\n\n### 6.3 查询关联表统计\n\n>model 需要定义的关联关系\n\n通过： `['关联方法名称_count']`\n\n```php\n$this->userRepostiory->find(1, ['user_id', 'name','ext_count']);\n```\n\/\/ 使用的是`model`的`withCount()` 方法\n```php\n\/\/ `model` 的写法\nUser::select(['user_id', 'name'])->withCount('ext')->where('user_id', 1)->first()->toArray();\n```\n### 6.4 查询join表字段\n\n```php\n$this->userRepostiory->find([\n    'joinWith' => 'ext',\n], ['user_id', 'name', 'user_ext.status']);\n```\n\n### 6.5 查询原生SQL字段\n\n```php\n$this->userRepository->find([\n    'status' => 1,\n], [\n    DB::raw('COUNT(*) AS `count_number`'),\n    DB::raw('MAX(`user_id`) AS `max_user_id`'),\n    DB::raw('AVG(`age`) AS `avg_age`'),\n]);\n```\n\n### 6.6 总结\n\n```php\n$columns = [\n\n    \/\/ 本表的字段查询\n    'id',\n    'username',\n\n    \/\/ 关联表字段查询\n    'ext'      => ['*'], \/\/ 对应`model`定义的 ext 关联\n    'children' => ['*'], \/\/ 对应`model`定义的 children 关联\n    \n    \/\/ 关联表统计字段查询\n    'ext_count',      \/\/ 对应`model`定义的 ext 关联\n    'children_count', \/\/ 对应`model`定义的 children 关联\n\n    \/\/ join表字段\n    'users.username',\n    'users.age',\n    \n    \/\/ 原生SQL字段\n    DB::raw('SUM(`users`.`age`) AS `sum_age`'),\n    DB::raw('COUNT(*) AS `total_count`'), \n];\n```\n\n## 七、增删改的事件方法\n\n子类定义了这些方法，才会执行，如果想阻止主方法执行，并能让主方法返回错误信息，直接抛出错误就可以\n\n### 7.1 新增的事件 在`create($data)` 执行的时候触发\n\n1. `beforeCreate($data)` 新增之前\n\n2. `afterCreate($data, $news)`  新增之后\n\n#### 7.1.1 参数说明\n\n| 参数名称 | 参数类型 | 参数说明                               |\n| -------- | -------- | -------------------------------------- |\n| `$data`  | `array`  | 过滤掉干扰数据(非表中字段的数据)的数组 |\n| `$news`  | `array`  | 新增成功调用 `model->toArray()` 数组   |\n\n### 7.2 修改的事件 在`update($conditions, array $data)` 执行的时候触发\n\n1. `beforeUpdate($conditions, $data)` 修改之前\n \n2. `afterUpdate($conditions, $data, $row)` 修改之后\n\n#### 7.2.1 参数说明\n\n| 参数名称      | 参数类型 | 参数说明                               |\n| ------------- | -------- | -------------------------------------- |\n| `$conditions` | `array`  | 处理了主键查询后的查询条件数组         |\n| `$data`       | `array`  | 过滤掉干扰数据(非表中字段的数据)的数组 |\n| `$row`        | `int`    | 修改受影响的行数                       |\n\n### 7.3 删除的事件 在`delete($conditions)` 执行的时候触发\n\n1. `beforeDelete($conditions)` 删除之前\n\n2. `afterDelete($conditions, $row)` 删除之后\n\n#### 7.3.1 参数说明\n\n| 参数名称      | 参数类型 | 参数说明                       |\n| ------------- | -------- | ------------------------------ |\n| `$conditions` | `array`  | 处理了主键查询后的查询条件数组 |\n| `$row`        | `int`    | 删除受影响的行数               |\n\n### 7.4 关于`$conditions` 处理为主键查询\n\n不为空的 字符串、整数、浮点数、索引数组 都会被转为主键查询\n\n```php\n\/\/ 假设表的主键为id\n$conditions = 1;            \/\/ 会被转为 ['id' => 1]\n$conditions = '1';          \/\/ 会被转为 ['id' => '1']\n$conditions = [1, 2, 3];    \/\/ 会被转为 ['id' => [1, 2, 3, 4]]\n```\n\n## 八、其他说明\n\n### 8.1 查询返回说明\n\n#### 8.1.1 查询返回数组的方法\n返回的是model->toArray()\n\n##### create(array $data)\n##### find($conditions, $columns = [])\n##### findAll($conditions, $columns = [])\n\n#### 8.1.2 返回的是对象的方法\n返回的model对象或者集合\n##### first($conditions, $columns = [])\n##### firstOrFail($conditions, $columns = [])\n##### firstOrCreate($attributes, $values)\n##### updateOrCreate($attributes, $values)\n##### get($conditions, $columns = [])\n\n### 8.2 对于`model`的要求\n\n1. `create` 和 `update` 都是批量赋值，需要`model`定义批量赋值的白名单`$fillable` 或者 黑名单 `$guarded`\n2. 需要定义 `$columns` 字段信息，表示表中都有哪些字段\n\n```php\nclass Posts extends \\Illuminate\\Database\\Eloquent\\Model \n{\n    public $guarded = ['id'];\n    \n    public $columns = [\n        'id', \n        'title', \n        'content', \n        'created_at', \n        'updated_at'\n    ];\n}\n\n```\n\n>虽然这一步是非必须的，但定义了`$columns`会减少一次`SQL`查询的代价",
        "v1.0.*": "Repository v1.0.* 版本使用说明\n============================\n\n[TOC]\n\n### 升级说明\n\nv2.0.* 版本在返回值和错误处理方面做了修改、不太建议 v1.0.* 版本升级到 v2.0.* 版本\nv1.0.* 版本会一直维护、但不会添加新的特性\n\n## 一、添加数据\n\n添加数据\n\n```\npublic function create(array $data);\n```\n#### 参数\n- `$data` 添加的数据(会自动过滤掉非表中字段信息，不允许为空)\n\n#### 返回值\n- `array` 返回数组 `[true, 'succcess', $model]`\n\n#### 示例\n\n```php\n\/**\n * 返回值说明\n * @param boolean $ok   true 表示成功\n * @param string  $msg  操作的提示信息\n * @param array   $data 新增成功后调用 model->toArray() 返回的数据， 失败为null \n *\/\nlist($ok, $msg, $data) = $this->repository->create([\n    'user_name' => 'Tony',\n    'age'       => 18,\n    'sex'       => 1,\n    'address'    => 'America'\n]);\n\n```\n\n## 二、编辑数据\n\n```\npublic function update($conditions, array $updateValues);\n```\n\n#### 参数\n- `$conditions` 修改的条件\n- `$updateValues` 修改的数据(会自动过滤掉非表中字段信息，不允许为空)\n#### 返回值\n- `array` 返回数组 `[true, 'success', $row]`\n#### 示例\n\n```php\n\/**\n * 返回值说明\n * @param boolean $ok   true 表示成功\n * @param string  $msg  操作的提示信息\n * @param int     $rows 表示修改数据条数\n *\/\nlist($ok, $msg, $rows) = $this->repository->update(1, ['type' => 3, 'money' => 9999]); \/\/ 主键修改 pk = 1\n\n\/\/ $this->repository->update(['id:gt' => 10], ['type' => 3, 'money' => 9999]);  \/\/ 条件修改 id > 10\n\n\/\/ $this->repository->update([1, 2, 3, 4], ['type' => 3, 'money' => 9999]); \/\/ 主键修改 pk in (1, 2, 3, 4)\n```\n\n#### 使用的是批量删除，模型的事件是不会触发的；但是修改数据能够使用上模型的修改器\n\n## 三、删除数据\n\n```\npublic function delete($conditions);\n```\n\n#### 参数\n- `$conditions` 删除的条件\n- \n#### 返回值\n- `array` 返回数组 `[true, 'success', $row]`\n\n#### 示例\n\n```php\n\/**\n * 返回值说明\n * @param boolean $ok   true 表示成功\n * @param string  $msg  操作的提示信息\n * @param int     $rows 表示删除数据条数\n *\/\nlist($ok, $msg, $rows) = $this->repository->delete(1); \/\/ 主键删除 pk = 1\n\n\/\/ $this->repository->delete(['id:gt' => 10]);  \/\/ 条件删除 id > 10\n\n\/\/ $this->>repository->delete([1, 2, 3, 4, 5]); \/\/ 主键删除 pk in (1, 2, 3, 4)\n``` \n\n## 四、查询数据\n\n### 4.1 查询单条数据\n\n1. 查询单条数据 find($conditions, $columns = [])\n\n    ```php\n    $item = $this->repository->find(1);  \/\/ 主键查询 pk = 1\n    ```\n\n2. 查询单个字段 findBy($conditions, $column)\n\n    ```php\n    $name = $this->repository->findBy(1, 'name'); \/\/ 查某个字段\n    ```\n\n### 4.2 查询多条数据\n\n1. 查询多条数据 findAll($conditions, $columns = [])\n\n    ```php\n    $items = $this->repository->findAll([1, 2, 3, 4]); \/\/ 主键查询 pk in (1, 2, 3, 4)\n    ```\n\n2. 查询多条数据的单个字段 findAllBy($conditions, $column)\n\n    ```php\n    $usernames = $this->repository->findAllBy([1, 2, 3], 'username'); \/\/ 查询某个字段的所有值\n    ```\n\n### 4.3 分页查询\n\n分页查询 paginate($conditions = [], $columns = [], $size = 10, $current = null)\n\n```php\n$list = $this->repository->paginate(['status' => 1], ['id', 'name', ...]);\n```\n\n## 五、查询进阶使用\n\n### 5.1 使用表达式查询\n\n> 使用方式\n\n[`字段`:`表达式` => `对应查询的值`]\n\n例如:\n\n```php\n\n$items = $this->repository->findAll([\n    'id:neq'    => 1,\n    'name:like' => '%test%'\n]);\n\n\/\/ 对应生成的sql: `id` != 1 and `name` like '%test%' \n```\n\n#### 目前支持的表达式\n\n| 表达式      | 含义                      | 特别说明                  |\n| :---------- | :------------------------ | :------------------------ |\n| eq          | 等于(=)                   |                           |\n| neq         | 不等于(!=)                |                           |\n| ne          | 不等于(!=)                |                           |\n| gt          | 大于(>)                   |                           |\n| egt         | 大于等于(>=)              |                           |\n| gte         | 大于等于(>=)              |                           |\n| ge          | 大于等于(>=)              |                           |\n| lt          | 小于(<)                   |                           |\n| le          | 小于等于(<=)              |                           |\n| lte         | 小于等于(<=)              |                           |\n| elt         | 小于等于(<=)              |                           |\n| in          | IN 查询                   | 传入数据会强转为数组      |\n| not in      | NOT IN 查询               | 传入数据会强转为数组      |\n| not_in      | NOT IN 查询               | 传入数据会强转为数组      |\n| between     | 区间查询(between)         | 传入数据会强转为数组      |\n| not_between | 不在区间查询(not between) | 传入数据会强转为数组      |\n| not between | 不在区间查询(not between) | 传入数据会强转为数组      |\n| like        | 模糊查询包含(like)        | 传入数据会强转为字符串    |\n| not_like    | 模糊查询不包含(not like)  | 传入数据会强转为字符串    |\n| not like    | 模糊查询不包含(not like)  | 传入数据会强转为字符串    |\n| rlike       | 模糊查询包含(rlike)       |                           |\n| <>          | 不等于(<>)                |                           |\n| auto_like   | 模糊查询(like)            | 会自动判断添加 % 模糊查询 |\n\n#### 关于 `auto_like` 查询说明\n\n```php\n\/\/ 没有添加前后模糊查询，会自动加上 username like '%test%'\n$this->repository->findAll(['username:auto_like' => 'test']); \n\n\/\/ 添加了前缀或者后缀模糊查询，那么不处理 username like 'test%'\n$this->repository->findAll(['username:auto_like' => 'test%']);\n\n```\n\n#### 使用表达式\n\n```php\n\/\/ 查询大于10的账号\n$this->repository->findAll(['id:gt' => 10]);\n\n\/\/ 查询不等于10的账号\n$this->repository->findAll(['id:neq' => 10]);\n\n\/\/ 查询id是1,2,3,4,5的这些数据\n$this->repository->findAll(['id:in' => [1, 2, 3, 4, 5]]);\n\/\/ or\n$this->repository->findAll(['id' => [1, 2, 3, 4, 5]]);\n\n\/\/ 查询创建时间在2019年的数据\n$this->repository->findAll(['created_at:between' => \n    [\n        '2019-01-01 00:00:00', \n        '2020-01-01 00:00:00',\n    ]\n]);\n``` \n\n#### 如果你记不住表达式,那么你同样可以直接使用操作符查询也是一样的\n\n```php\n$item = $this->repository->findAll([\n    'id:!='         => 2,\n    'username:like' => '%test%',\n    'status:>='     => 4,\n]);\n```\n\n**同样是 查询字段:操作符 => '查询的值'**\n\n#### 其他说明\n\n`update` 和 `create` 方法同样支持表达式查询，都是使用`findCondition($condiitons)` 方法处理\n\n1. [update 的使用说明](#12-编辑数据-updateconditions-array-data)\n2. [delete 的使用说明](#13-删除数据-deleteconditions)\n\n### 5.2 使用 `scope` 查询\n\n>举个🌰栗子,你有一张用户表 users, 用户表的扩展信息存在 user_ext 里;\n现在你想查询用户地址在指定位置信息的所有用户信息, 那么就需要使用`scope` 查询了\n\n要求model定义了`scope`查询\n\n#### Model 的定义 \n\n```php\n\nclass User extends Model\n{\n    protected $table      = 'users';\n    protected $primaryKey = 'user_id';\n    public    $columns    = [\n        'user_id',\n        'username',\n        \/\/...\n        'created_at',\n        'updated_at',\n    ];\n \n  \n    \/**\n     * 定义关联扩展信息\n     * \n     * return Illuminate\\Database\\Eloquent\\Relations\\HasOne\n     *\/\n    public function extInfo()\n    {\n      return $this->hasOne(UserExt::class, 'user_id', 'user_id');\n    }\n \n\n    \/**\n     * 根据地址查询\n     *\n     * @param \\Illuminate\\Database\\Eloquent\\Builder $query   查询对象\n     * @param string                                $address 地址信息\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     *\/\n    public function scopeAddress($query, $address)\n    {\n        return $query->leftJoin('user_ext', 'user_ext.user_id', '=', 'users.user_id')\n            ->where('user_ext.address', '=', $address);\n    }\n}   \n\n```\n\n#### `repository` 查询\n\n```php\n$this->userRepositoy->findAll([\n    'status'  => 1,\n    'address' => '北京'\n]);\n\n```\n查询的SQL\n\n```sql\n\nselect \n    * \nfrom \n    `users` \nleft join \n    `user_ext` on (`user_ext`.`user_id` = `users`.`user_id`) \nwhere \n    `users.status` = 1 and `user_ext`.`address` = '北京'\n    \n```\n\n### 5.4 获取`relation`关联数据信息\n\n当我们查询数据时候，也想把关联数据查询出来的时候，就会用到关联查询\n\n使用的是`model`的`with`方法\n\n>举个🌰栗子,你有一张用户表users,用户表的扩展信息存在user_ext里 \n也许你想查询用户信息的时候同时查出用户的扩展信息\n\n要求`model`定义了关联\n\n`model` 使用上面定义的 [`User`](#152-使用-model-的-scope-查询)\n\n1. 使用 `repository` 获取关联数据信息, 通过查询字段，自动处理关联\n\n    查询字段中添加 `关联关系` => [`关联查询的字段信息`]\n    \n    ```php\n        $users = $this->repository->findAll(['status' => 1], ['*', 'extInfo' => ['*']]);\n    ```\n\n2. 查询SQL \n\n    [这里使用预加载数据](https:\/\/learnku.com\/docs\/laravel\/5.5\/eloquent-relationships\/1333#012e7e), 避免N+1问题\n\n    ```sql\n    select * from `users` where `users`.`status` = 1\n    \n    select * from `user_ext` where `user_id` in (1, 2, 3, 4)\n    ```\n\n3. 数据信息\n\n    ![关联的数据](https:\/\/wanchaochao.github.io\/laravel-repository\/docs\/images\/relation.png '关联的数据')\n\n#### 说明\n    \n1. 上面有个小的问题，`model`定义的关联名称为`extInfo`, 但是出来数组对应的字段信息为\n `ext_info` , 并且查询指定字段信息也是为`extInfo` (`'extInfo' => ['*']`), 查询\n 出来的数据是`laravel` `model` 的 `toArray()` 方法处理的结果,会将`小驼峰`命名的\n 关联信息转为`蛇形`命名字段，`repository`查询字段支持`小驼峰`和`蛇形`命名，例如：\n     \n ```php\n    $users = $this->repository->findAll(['status' => 1], ['*', 'ext_info' => ['*']]);\n ``` \n       \n     和上面的结果是一致的，为了更好的一致性，建议`model`在定义联查询命名的时候，使用单个单词的单复数形式比较好\n\n2. 在查询时候指定字段，并且指定查询关联查询字段\n\n    ```php\n    $users = $this->userRepository->findAll(['status' => 1], ['username', 'extInfo' => ['address']]);\n    ```    \n   \n   上面查询指定了查询的字段，但有一个问题，没有指定出关联表查询需要的字段 `user_id` 字段信息，会导致关联信息关联不上的问题\n   **但`repository`解决了这个问题，会自动加上关联查询需要的字段信息**，所以最终查询的SQL和数据如下:\n   \n   ![关联的数据](https:\/\/wanchaochao.github.io\/laravel-repository\/docs\/images\/relation-1.png '关联的数据')\n   \n   >这可能会让人认为我明明只查询了`username`字段，怎么还查出了其他字段信息\n   \n   **只有在关联查询的时候，没有指定查询关联字段，才会自动加上关联字段**\n   \n### 5.5 `relation`关联统计查询\n\n这个功能比较适合一对多的时候，我想知道关联的其他信息有多少\n\n只要定义了`model`的关联信息，就可以直接使用了，其实就是 `model` 的 `withCount`\n\n>`model`定义的`关联方法名称_count`\n\n`model` 使用上面定义的 [`User`](#152-使用-model-的-scope-查询)\n\n```php\n$user = $this->repositoy->find(['status' => 1], ['id', 'username', 'extInfo_count']);\n```\n\n执行SQL以及数据\n\n![关联的数据](https:\/\/wanchaochao.github.io\/laravel-repository\/docs\/images\/relation-2.png '关联的数据')\n\n### 5.6 给`relation`关联查询添加附加条件\n\n查询条件中添加 `model定义关联方法名称.字段` => '查询的值'\n\n`model` 使用上面定义的 [`User`](#152-使用-model-的-scope-查询)\n\n例如：\n\n```php\n\n$users = $this->repository->findAll([\n    'status'                => 1,\n    'extInfo.address'       => '北京',\n    'extInfo.created_at:gt' => '2019-02-01 00:00:00', \/\/ 同样支持表达式查询\n], ['extInfo' => ['*']]);\n\n```\n执行的SQL：\n```sql\nselect * from `users` where `users`.`status` = 1\n\nselect * from `user_ext` where \n    `user_ext`.`address` = '北京' and \n    `user_ext`.`created_at` > '2019-02-01 00:00:00' and \n    `user_ext`.`user_id` in (1, 2, 3, 4)\n```\n\n### 5.7 过滤空值查询\n\n**空字符串、空数组、null会被认为空值**\n\n#### 1. 查询单个 filterFind($conditions, $columns = [])\n\n    ```php\n    $item = $this->repositpry->filterFind([\n        'username:like' => request()->input('username'),\n        'status'        => request()->input('status')\n    ]);\n    ```\n\n#### 2. 查询多个 filterFindAll($conditions, $columns = [])\n\n    ```php\n    $items = $this->repositpry->filterFindAll([\n        'username:like' => request()->input('username'),\n        'status'        => request()->input('status')\n    ]);\n    ```\n#### 3. 获取过滤空值查询的model getFilterModel($conditions, $columns = [])\n\n    ```php\n    $model = $this->repositpry->getFilterModel([\n        'username:like' => request()->input('username'),\n        'status'        => request()->input('status')\n    ]);\n    ```\n    \n>这几个方法，相当于 [when 条件查询](https:\/\/learnku.com\/docs\/laravel\/5.5\/queries\/1327#conditional-clauses)\n在和前端交互时，不确定前端是否传递值来进行查询时候，比较方便\n\n```php\n\/\/ 平时写法\n$conditions = [];\n\nif ($username = request()->input('username')) {\n    $conditions['username:like'] = $username;\n}\n\nif ($status = request()->input('status')) {\n    $conditions['status'] = $status;\n}\n\n$items = $this->repository->findAll($conditions);\n\n\/\/ 使用 filter 过滤查询\n$items = $this->repositpry->filterFindAll([\n    'username:like' => request()->input('username'),\n    'status'        => request()->input('status')\n]);\n```\n\n### 5.9 使用`join`查询\n\n>`leftJoin` 和 `rightJoin` 和 `join` 使用一致\n\n##### 1. 简单`join`\n\n```php\n$this->repository->findAll([\n    'join' => ['users', 'users.school_id', '=', 'school.id']\n]);\n\n```\n\n```sql\nselect `school`.* from `school` inner join `users` on (`users`.`school_id` = `school`.`id`)\n```\n\n##### 2. 一次多个`join`\n```php\n$this->repository->findAll([\n    'join' => [\n        ['users', 'users.school_id', '=', 'school.id'],\n        ['school as s1', 's1.parent_id', '=', 'school.id']\n    ]\n]);\n\n```\n\n```sql\nselect \n    `school`.* \nfrom \n    `school` \ninner join `users` on (`users`.`school_id` = `school`.`id`) \ninner join `school` as `s1` on (`s1`.`parent_id` = `school`.`id`)\n```\n\n##### 3. 使用关联关系对应join\n\n`model` 使用上面定义的 [`User`](#152-使用-model-的-scope-查询)\n\n```php\n$users = $this->repository->findAll(['status' => 1, 'joinWith' => 'extInfo']);\n```\n\n```sql\nselect \n    `users`.* \nfrom \n    `users` \ninner join `user_ext` on `user_ext`.`user_id` = `users`.`user_id`\nwhere `users`.`status` = 1\n```\n\n##### 4. 使用关联关系对应join并设置别名\n\n>['别名' => '关联方法名称']\n\n```php\n$users = $this->repository->findAll(['status' => 1, 'joinWith' => ['ext' => 'extInfo']]);\n```\n\n```sql\nselect \n    `users`.* \nfrom \n    `users` \ninner join `user_ext` as `ext` on `ext`.`user_id` = `users`.`user_id` \nwhere `users`.`status` = 1\n```\n\n##### 5. 为`join`添加查询条件\n\n>通过 ['__join表名称.字段' => '对应的值'], 目前没有比较直观的方式处理、因为 `order.user_id` 方式被关联关系的附加条件占用了\n\n```php\n$users = $this->repository->findAll([\n    'status'        => 1, \n    'joinWith'      => ['ext' => 'extInfo'],\n    '__ext.user_id' => 1,\n]);\n```\n\n```sql\nselect \n    `users`.* \nfrom \n    `users` \ninner join `user_ext` as `ext` on `ext`.`user_id` = `users`.`user_id`\nwhere `users`.`status` = 1 and `ext`.`user_id` = 1\n```\n\n## 六、关于查询中的`$conditions`和`$columns`信息说明\n\n>`$conditions`为`sql`查询定义查询条件，`$columns`为`sql`的`select`添加指定的查询字段\n\n### 6.1 `$conditions` 查询条件\n\n1. 支持字段精准查询(表中字段的查询)\n2. 预定有字段查询[参考](#211-预定义的字段)\n3. 支持表达式查询[参考](#15-查询进阶使用)\n4. 支持关联条件查询[参考](#156-给-model-的-relation-关联查询动态添加查询条件)\n5. 支持`model`的`scope`[参考](#152-使用-model-的-scope-查询)\n\n例如：\n\n```php\n$conditions = [\n    \/\/ 表中字段精准查询\n    'status' => 1,\n    'id'     => [1, 2, 3, 4], \/\/ 值为数组会自动转为in查询 `id` in (1, 2, 3, 4)\n    \n    \/\/ 预定义字段查询\n    'order' => 'id desc',\/\/ 指定排序字段和方式\n    'limit' => 10,       \/\/ 限制查询条件\n    'group' => 'id',     \/\/ 指定分组条件\n    'force' => 'name',   \/\/ 指定使用的索引\n  \n    \/\/ join 关联查询\n    'join'     => ['users', 'users.user_id', '=', 'orders.user_id'],\n    'leftJoin' => [\n        \/\/ 多个leftJoin\n        ['users as u1', 'u1.user_id', '=', 'orders.user_id'],\n        ['user_image', 'users_image.user_id', '=', 'users.user_id'],\n    ],\n\n    \/\/ 表达式查询\n    'username:like'      => 'test',                                         \/\/ 模糊查询\n    'created_at:between' => ['2019-01-02 00:00:00', '2019-01-03 23:59:59'], \/\/ 区间查询\n    'id:ge'              => 12, \/\/ id > 12\n\n    \/\/ relation 关联查询,查询条件只对当前relation关联查询限制\n    'extInfo.address:like'   => '北京',\n    'extInfo.created_at:gte' => '2019-01-01 00:00:00',\n    \n    \/\/ 通过 relation 关联关系，添加join 查询\n    'joinWith'     => ['extInfo'],\n    \/\/ 关联表定义别名 alias, 如果没有别名，关联表和主表同名，使用自定义别名 `t1`, 多个同名以此地址 `t2`、`t3`\n    'leftJoinWith' => ['alias' => 'children'], \n    \n    \/\/ scope 自定义查询\n    'address'  => '北京',     \/\/ 查找`scopeAddress($query, $address)`方法\n    'children' => [1, 2, 3],  \/\/ 查找`scopeChildren($query, $childrenIds)`方法\n];\n```\n\n#### 2.1.1 预定义的字段\n\n| 字段名称        | 字段值类型        | 说明                                |\n| --------------- | ----------------- | ----------------------------------- |\n| `or`            | `array`           | 添加`or`查询                        |\n|                 |\n| `and`           | `array`           | 添加`and`查询                       |\n| `force`         | `string`          | 强制走指定索引                      |\n| `order`         | `string or array` | 指定排序条件                        |\n| `limit`         | `int`             | 指定查询条数                        |\n| `offset`        | `int`             | 指定跳转位置                        |\n| `group`         | `string`          | 指定分组字段                        |\n| `join`          | `array`           | 查询join的参数，多个二维数组        |\n| `leftJoin`      | `array`           | 查询`leftJoin`的参数、多个二维数组  |\n| `rightJoin`     | `array`           | 查询`rightJoin`的参数、多个二维数组 |\n| `joinWith`      | `string or array` | 通过关联关系对应join查询            |\n| `leftJoinWith`  | `string or array` | 通过关联关系对应leftJoin查询        |\n| `rightJoinWith` | `string or array` | 通过关联关系对应rightJoin查询       |\n\n### 6.2 `$columns` 查询的字段信息\n\n1. 支持本表字段查询\n2. 支持关联统计字段查询\n3. 支持关联数据字段查询\n\n```php\n$columns = [\n\n    \/\/ 本表的字段查询\n    'id',\n    'username',\n\n    \/\/ 关联表的字段查询\n    'users.username',\n    'users.age',\n    \n    \/\/ 使用表达式查询\n    DB::raw('SUM(`users`.`age`) AS `sum_age`'),\n    \n    \/\/ 关联统计字段查询\n    'extInfo_count',  \/\/ 对应`model`定义的 extInfo 关联\n    'children_count', \/\/ 对应`model`定义的 children 关联\n    \n    \/\/ 关联表字段查询\n    'extInfo'  => ['*'], \/\/ 对应`model`定义的 extInfo 关联\n    'children' => ['*'], \/\/ 对应`model`定义的 children 关联\n];\n```\n\n## 七、方法列表\n\n### 7.1 方法列表\n\n>repository所有方法都是对外的，这里只列出常用方法\n\n| 方法名称                                                                       | 返回值                               | 方法说明                                                          |\n| ------------------------------------------------------------------------------ | ------------------------------------ | ----------------------------------------------------------------- |\n| `find($conditions, $columns = [])`                                             | `array or false`                     | 查询一条数据                                                      |\n| `findBy($conditions, $column)`                                                 | `mixed`                              | 查询单条数据的单个字段                                            |\n| `findAll($conditions, $columns = [])`                                          | `array`                              | 查询多条数据                                                      |\n| `findAllBy($conditions, $column)`                                              | `array`                              | 查询多条数组的单个字段数组                                        |\n| `filterFind($conditions, $columns = [])`                                       | `array or false`                     | 过滤查询条件中的空值查询一条数据                                  |\n| `filterFindAll($condtions, $columns = [])`                                     | `array`                              | 过滤查询条件中的空值查询多条数据                                  |\n| `paginate($conditions = [], $columns = [], $size = 10, $current = null)`       | `array`                              | 分页查询数据                                                      |\n| `filterPaginate($conditions = [], $columns = [], $size = 10, $current = null)` | `array`                              | 过滤查询条件中的空值分页查询数据                                  |\n| `getFilterModel($conditions, $columns = [])`                                   | `Illuminate\\Database\\Eloquent\\Model` | 获取已经过滤处理查询条件的`model`                                 |\n| `findCondition($conditions = [], $columns = [])`                                  | `Illuminate\\Database\\Eloquent\\Model` | 获取已经处理查询条件的`model`(**上面所有查询方法都基于这个方法**) |\n| `create(array $data)`                                                          | `array`                              | 添加数据                                                          |\n| `update($conditions, array $data)`                                             | `array`                              | 修改数据(使用的是批量修改)                                        |\n| `delete($conditions)`                                                          | `array`                              | 删除数据(使用的是批量删除)                                        |\n\n#### 参数说明\n\n| 参数名称      | 参数类型                 | 参数说明                                                              |\n| ------------- | ------------------------ | --------------------------------------------------------------------- |\n| `$conditions` | `array or string or int` | 查询条件(`string or int or 索引数组[1, 2, 3, 4]`会自动转换为主键查询) |\n| `$columns`    | `array`                  | 查询的字段数组                                                        |\n| `$column`     | `string`                 | 查询的字段名称                                                        |\n| `$data`       | `array`                  | 创建或者修改的数组数据信息                                            |\n| `$where`      | `array`                  | 查询条件                                                              |\n\n### 7.2 支持`model`的方法\n\n| 方法名称                                               | 返回值                                     | 方法说明                          |\n| ------------------------------------------------------ | ------------------------------------------ | --------------------------------- |\n| `getConnection()`                                      | `Illuminate\\Database\\Connection`           | 获取连接信息                      |\n| `insert(array $values)`                                | `boolean`                                  | 新增数据(支持批量新增)            |\n| `insertGetId(array $values)`                           | `int`                                      | 新增数据并获取新增ID              |\n| `firstOrCreate(array $attributes, array $value = [])`  | `Illuminate\\Database\\Eloquent\\Model`       | 查询数据，不存在那么新增一条数据  |\n| `firstOrNew(array $attributes, array $value = [])`     | `Illuminate\\Database\\Eloquent\\Model`       | 查询数据、不存在那么`new`出来     |\n| `updateOrCreate(array $attributes, array $value = [])` | `Illuminate\\Database\\Eloquent\\Model`       | 修改数据，不存在那么新增一条数据  |\n| `findOrFail($id, $columns = ['*'])`                    | `Illuminate\\Database\\Eloquent\\Model`       | 通过主键查询数据，不存在抛出错误  |\n| `findOrNew($id, $columns = ['*'])`                     | `Illuminate\\Database\\Eloquent\\Model`       | 通过主键查询数据，不存在`new`出来 |\n| `findMany($ids, $columns = ['*'])`                     | `\\Illuminate\\Database\\Eloquent\\Collection` | 通过主键数组查询多条数据          |\n\n#### 参数说明\n\n| 参数名称      | 参数类型        | 参数说明                                           |\n| ------------- | --------------- | -------------------------------------------------- |\n| `$attributes` | `array`         | `model`的字段信息(查询条件)                        |\n| `$value`      | `array or null` | `model`的其他字段信息(不参与查询、参与新增和`new`) |\n| `$values`     | `array`         | 新增数据需要的字段 => 值 数组信息                  |\n| `$id`         | `int or string` | 主键ID值                                           |\n| `$ids`        | `array`         | 主键ID数组                                         |\n| `$columns`    | `array`         | 查询的字段信息                                     |\n\n### 7.3 通过`findCondition($conditions)`查询后转换为`model`查询方法\n\n| 方法名称                                       | 返回值                                       | 方法说明                       |\n| ---------------------------------------------- | -------------------------------------------- | ------------------------------ |\n| `first($conditions, $columns = ['*'])`         | `Illuminate\\Database\\Eloquent\\Model or null` | 查询一条数据                   |\n| `get($conditions, $columns = ['*'])`           | `Illuminate\\Database\\Eloquent\\Collection`    | 查询多条数据                   |\n| `pluck($conditions, $column, $key = null)`     | `Illuminate\\Support\\Collection`              | 查询单个字段信息               |\n| `firstOrFail($conditions)`                     | `Illuminate\\Database\\Eloquent\\Model`         | 查询一条数据、没有那么抛出错误 |\n| `count($conditions = [])`                      | `int`                                        | 统计查询                       |\n| `max($conditions, $column)`                    | `int or mixed`                               | 最大值查询                     |\n| `min($conditions, $column)`                    | `int or mixed`                               | 最小值查询                     |\n| `avg($conditions, $column)`                    | `int or mixed`                               | 平均值查询                     |\n| `sum($conditions, $column)`                    | `int or mixed`                               | 求和查询                       |\n| `toSql($conditions)`                           | `string`                                     | 获取执行的`SQL`                |\n| `getBindings($conditions = [])`                | `array or mixed`                             | 获取查询绑定的参数             |\n| `increment($conditions, $column, $amount = 1)` | `int`                                        | 指定字段累加                   |\n| `decrement($conditions, $column, $amount = 1)` | `int`                                        | 指定字段累减                   |\n\n#### 参数说明\n\n| 参数名称      | 参数类型                 | 参数说明                                                              |\n| ------------- | ------------------------ | --------------------------------------------------------------------- |\n| `$conditions` | `array or string or int` | 查询条件(`string or int or 索引数组[1, 2, 3, 4]`会自动转换为主键查询) |\n| `$columns`    | `array`                  | 查询的字段数组                                                        |\n| `$column`     | `string`                 | 查询的字段名称                                                        |\n| `$key`        | `string or null`         | 查询单个字段组成数组的`key`(索引下标使用字段)                         |\n\n## 八、增删改的事件方法\n\n>子类定义了这些方法，才会执行，如果想阻止主方法执行，并能让主方法返回错误信息，直接抛出错误就可以\n\n### 8.1 新增的事件 在`create($data)` 执行的时候触发\n\n1. `beforeCreate($data)` 新增之前\n\n2. `afterCreate($data, $news)`  新增之后\n\n#### 参数说明\n\n| 参数名称 | 参数类型 | 参数说明                               |\n| -------- | -------- | -------------------------------------- |\n| `$data`  | `array`  | 过滤掉干扰数据(非表中字段的数据)的数组 |\n| `$news`  | `array`  | 新增成功调用 `model->toArray()` 数组   |\n\n### 8.2 修改的事件 在`update($conditions, array $data)` 执行的时候触发\n\n1. `beforeUpdate($conditions, $data)` 修改之前\n \n2. `afterUpdate($conditions, $data, $row)` 修改之后\n\n#### 参数说明\n\n| 参数名称      | 参数类型 | 参数说明                               |\n| ------------- | -------- | -------------------------------------- |\n| `$conditions` | `array`  | 处理了主键查询后的查询条件数组         |\n| `$data`       | `array`  | 过滤掉干扰数据(非表中字段的数据)的数组 |\n| `$row`        | `int`    | 修改受影响的行数                       |\n\n### 8.3 删除的事件 在`delete($conditions)` 执行的时候触发\n\n1. `beforeDelete($conditions)` 删除之前\n\n2. `afterDelete($conditions, $row)` 删除之后\n\n#### 参数说明\n\n| 参数名称      | 参数类型 | 参数说明                       |\n| ------------- | -------- | ------------------------------ |\n| `$conditions` | `array`  | 处理了主键查询后的查询条件数组 |\n| `$row`        | `int`    | 删除受影响的行数               |\n\n### 8.4 关于`$conditions` 处理为主键查询\n\n不为空的 字符串、整数、浮点数、索引数组 都会被转为主键查询\n\n```php\n\/\/ 假设表的主键为id\n\n$conditions = 1;            \/\/ 会被转为 ['id' => 1]\n$conditions = '1';          \/\/ 会被转为 ['id' => '1']\n$conditions = [1, 2, 3];    \/\/ 会被转为 ['id' => [1, 2, 3, 4]]\n\n\/\/ 关联数组中，只要有一个元素为索引下标的，会被认为是 索引数组\n$conditions = ['id' => 1, 'name' => '123', '789'];\n\n\/\/ 同样会被认为是索引数组，会转为 \n$conditions = ['id' => [1, '123', '789']];\n\n```\n\n## 九、其他说明\n\n### 9.1 关于`repository`的`create`、`update`、`delete` 的返回\n\n这三个函数不管处理成功和失败，返回的都是数组信息。因为`php`不能像`golang`那样,\n可以多返回，而在我们逻辑中，经常需要知道执行错误了，是什么样的错误信息，所以这里\n都是通过数组的方式返回，这样就解决多值返回问题。这也是受`golang`的影响！不过\n`laravel`其实更推荐是通过抛出错误方式，去统一管理所有的错误信息。所以如果不喜欢\n现在数组的返回方式的话，只需要重写 `success($data, $message === 'ok')` \n和 `error($message, $data = [])` 这两个方法就好了\n\n### 9.2 `repository` 查询 `find`, `findAll` 查询结果都是 `model->toArray()` 的数组，并不是 `model` 对象\n\n### 9.3 对于`model`的要求\n\n1. `create` 和 `update` 都是批量赋值，需要`model`定义批量赋值的白名单`$fillable` 或者 黑名单 `$guarded`\n2. 需要定义 `$columns` 字段信息，表示表中都有哪些字段\n\n    ```\n    public $columns = ['id', 'title', 'content', 'created_at', 'updated_at'];\n    ```\n    \n    >虽然这一步是非必须的，但定义了`$columns`会减少一次`SQL`查询的代价",
        "v1.0.*.zh-CN": "Repository v1.0.* 版本使用说明\n============================\n\n[TOC]\n\n### 升级说明\n\nv2.0.* 版本在返回值和错误处理方面做了修改、不太建议 v1.0.* 版本升级到 v2.0.* 版本\nv1.0.* 版本会一直维护、但不会添加新的特性\n\n## 一、添加数据\n\n添加数据\n\n```\npublic function create(array $data);\n```\n#### 参数\n- `$data` 添加的数据(会自动过滤掉非表中字段信息，不允许为空)\n\n#### 返回值\n- `array` 返回数组 `[true, 'succcess', $model]`\n\n#### 示例\n\n```php\n\/**\n * 返回值说明\n * @param boolean $ok   true 表示成功\n * @param string  $msg  操作的提示信息\n * @param array   $data 新增成功后调用 model->toArray() 返回的数据， 失败为null \n *\/\nlist($ok, $msg, $data) = $this->repository->create([\n    'user_name' => 'Tony',\n    'age'       => 18,\n    'sex'       => 1,\n    'address'    => 'America'\n]);\n\n```\n\n## 二、编辑数据\n\n```\npublic function update($conditions, array $updateValues);\n```\n\n#### 参数\n- `$conditions` 修改的条件\n- `$updateValues` 修改的数据(会自动过滤掉非表中字段信息，不允许为空)\n#### 返回值\n- `array` 返回数组 `[true, 'success', $row]`\n#### 示例\n\n```php\n\/**\n * 返回值说明\n * @param boolean $ok   true 表示成功\n * @param string  $msg  操作的提示信息\n * @param int     $rows 表示修改数据条数\n *\/\nlist($ok, $msg, $rows) = $this->repository->update(1, ['type' => 3, 'money' => 9999]); \/\/ 主键修改 pk = 1\n\n\/\/ $this->repository->update(['id:gt' => 10], ['type' => 3, 'money' => 9999]);  \/\/ 条件修改 id > 10\n\n\/\/ $this->repository->update([1, 2, 3, 4], ['type' => 3, 'money' => 9999]); \/\/ 主键修改 pk in (1, 2, 3, 4)\n```\n\n#### 使用的是批量删除，模型的事件是不会触发的；但是修改数据能够使用上模型的修改器\n\n## 三、删除数据\n\n```\npublic function delete($conditions);\n```\n\n#### 参数\n- `$conditions` 删除的条件\n- \n#### 返回值\n- `array` 返回数组 `[true, 'success', $row]`\n\n#### 示例\n\n```php\n\/**\n * 返回值说明\n * @param boolean $ok   true 表示成功\n * @param string  $msg  操作的提示信息\n * @param int     $rows 表示删除数据条数\n *\/\nlist($ok, $msg, $rows) = $this->repository->delete(1); \/\/ 主键删除 pk = 1\n\n\/\/ $this->repository->delete(['id:gt' => 10]);  \/\/ 条件删除 id > 10\n\n\/\/ $this->>repository->delete([1, 2, 3, 4, 5]); \/\/ 主键删除 pk in (1, 2, 3, 4)\n``` \n\n## 四、查询数据\n\n### 4.1 查询单条数据\n\n1. 查询单条数据 find($conditions, $columns = [])\n\n    ```php\n    $item = $this->repository->find(1);  \/\/ 主键查询 pk = 1\n    ```\n\n2. 查询单个字段 findBy($conditions, $column)\n\n    ```php\n    $name = $this->repository->findBy(1, 'name'); \/\/ 查某个字段\n    ```\n\n### 4.2 查询多条数据\n\n1. 查询多条数据 findAll($conditions, $columns = [])\n\n    ```php\n    $items = $this->repository->findAll([1, 2, 3, 4]); \/\/ 主键查询 pk in (1, 2, 3, 4)\n    ```\n\n2. 查询多条数据的单个字段 findAllBy($conditions, $column)\n\n    ```php\n    $usernames = $this->repository->findAllBy([1, 2, 3], 'username'); \/\/ 查询某个字段的所有值\n    ```\n\n### 4.3 分页查询\n\n分页查询 paginate($conditions = [], $columns = [], $size = 10, $current = null)\n\n```php\n$list = $this->repository->paginate(['status' => 1], ['id', 'name', ...]);\n```\n\n## 五、查询进阶使用\n\n### 5.1 使用表达式查询\n\n> 使用方式\n\n[`字段`:`表达式` => `对应查询的值`]\n\n例如:\n\n```php\n\n$items = $this->repository->findAll([\n    'id:neq'    => 1,\n    'name:like' => '%test%'\n]);\n\n\/\/ 对应生成的sql: `id` != 1 and `name` like '%test%' \n```\n\n#### 目前支持的表达式\n\n| 表达式      | 含义                      | 特别说明                  |\n| :---------- | :------------------------ | :------------------------ |\n| eq          | 等于(=)                   |                           |\n| neq         | 不等于(!=)                |                           |\n| ne          | 不等于(!=)                |                           |\n| gt          | 大于(>)                   |                           |\n| egt         | 大于等于(>=)              |                           |\n| gte         | 大于等于(>=)              |                           |\n| ge          | 大于等于(>=)              |                           |\n| lt          | 小于(<)                   |                           |\n| le          | 小于等于(<=)              |                           |\n| lte         | 小于等于(<=)              |                           |\n| elt         | 小于等于(<=)              |                           |\n| in          | IN 查询                   | 传入数据会强转为数组      |\n| not in      | NOT IN 查询               | 传入数据会强转为数组      |\n| not_in      | NOT IN 查询               | 传入数据会强转为数组      |\n| between     | 区间查询(between)         | 传入数据会强转为数组      |\n| not_between | 不在区间查询(not between) | 传入数据会强转为数组      |\n| not between | 不在区间查询(not between) | 传入数据会强转为数组      |\n| like        | 模糊查询包含(like)        | 传入数据会强转为字符串    |\n| not_like    | 模糊查询不包含(not like)  | 传入数据会强转为字符串    |\n| not like    | 模糊查询不包含(not like)  | 传入数据会强转为字符串    |\n| rlike       | 模糊查询包含(rlike)       |                           |\n| <>          | 不等于(<>)                |                           |\n| auto_like   | 模糊查询(like)            | 会自动判断添加 % 模糊查询 |\n\n#### 关于 `auto_like` 查询说明\n\n```php\n\/\/ 没有添加前后模糊查询，会自动加上 username like '%test%'\n$this->repository->findAll(['username:auto_like' => 'test']); \n\n\/\/ 添加了前缀或者后缀模糊查询，那么不处理 username like 'test%'\n$this->repository->findAll(['username:auto_like' => 'test%']);\n\n```\n\n#### 使用表达式\n\n```php\n\/\/ 查询大于10的账号\n$this->repository->findAll(['id:gt' => 10]);\n\n\/\/ 查询不等于10的账号\n$this->repository->findAll(['id:neq' => 10]);\n\n\/\/ 查询id是1,2,3,4,5的这些数据\n$this->repository->findAll(['id:in' => [1, 2, 3, 4, 5]]);\n\/\/ or\n$this->repository->findAll(['id' => [1, 2, 3, 4, 5]]);\n\n\/\/ 查询创建时间在2019年的数据\n$this->repository->findAll(['created_at:between' => \n    [\n        '2019-01-01 00:00:00', \n        '2020-01-01 00:00:00',\n    ]\n]);\n``` \n\n#### 如果你记不住表达式,那么你同样可以直接使用操作符查询也是一样的\n\n```php\n$item = $this->repository->findAll([\n    'id:!='         => 2,\n    'username:like' => '%test%',\n    'status:>='     => 4,\n]);\n```\n\n**同样是 查询字段:操作符 => '查询的值'**\n\n#### 其他说明\n\n`update` 和 `create` 方法同样支持表达式查询，都是使用`findCondition($condiitons)` 方法处理\n\n1. [update 的使用说明](#12-编辑数据-updateconditions-array-data)\n2. [delete 的使用说明](#13-删除数据-deleteconditions)\n\n### 5.2 使用 `scope` 查询\n\n>举个🌰栗子,你有一张用户表 users, 用户表的扩展信息存在 user_ext 里;\n现在你想查询用户地址在指定位置信息的所有用户信息, 那么就需要使用`scope` 查询了\n\n要求model定义了`scope`查询\n\n#### Model 的定义 \n\n```php\n\nclass User extends Model\n{\n    protected $table      = 'users';\n    protected $primaryKey = 'user_id';\n    public    $columns    = [\n        'user_id',\n        'username',\n        \/\/...\n        'created_at',\n        'updated_at',\n    ];\n \n  \n    \/**\n     * 定义关联扩展信息\n     * \n     * return Illuminate\\Database\\Eloquent\\Relations\\HasOne\n     *\/\n    public function extInfo()\n    {\n      return $this->hasOne(UserExt::class, 'user_id', 'user_id');\n    }\n \n\n    \/**\n     * 根据地址查询\n     *\n     * @param \\Illuminate\\Database\\Eloquent\\Builder $query   查询对象\n     * @param string                                $address 地址信息\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     *\/\n    public function scopeAddress($query, $address)\n    {\n        return $query->leftJoin('user_ext', 'user_ext.user_id', '=', 'users.user_id')\n            ->where('user_ext.address', '=', $address);\n    }\n}   \n\n```\n\n#### `repository` 查询\n\n```php\n$this->userRepositoy->findAll([\n    'status'  => 1,\n    'address' => '北京'\n]);\n\n```\n查询的SQL\n\n```sql\n\nselect \n    * \nfrom \n    `users` \nleft join \n    `user_ext` on (`user_ext`.`user_id` = `users`.`user_id`) \nwhere \n    `users.status` = 1 and `user_ext`.`address` = '北京'\n    \n```\n\n### 5.4 获取`relation`关联数据信息\n\n当我们查询数据时候，也想把关联数据查询出来的时候，就会用到关联查询\n\n使用的是`model`的`with`方法\n\n>举个🌰栗子,你有一张用户表users,用户表的扩展信息存在user_ext里 \n也许你想查询用户信息的时候同时查出用户的扩展信息\n\n要求`model`定义了关联\n\n`model` 使用上面定义的 [`User`](#152-使用-model-的-scope-查询)\n\n1. 使用 `repository` 获取关联数据信息, 通过查询字段，自动处理关联\n\n    查询字段中添加 `关联关系` => [`关联查询的字段信息`]\n    \n    ```php\n        $users = $this->repository->findAll(['status' => 1], ['*', 'extInfo' => ['*']]);\n    ```\n\n2. 查询SQL \n\n    [这里使用预加载数据](https:\/\/learnku.com\/docs\/laravel\/5.5\/eloquent-relationships\/1333#012e7e), 避免N+1问题\n\n    ```sql\n    select * from `users` where `users`.`status` = 1\n    \n    select * from `user_ext` where `user_id` in (1, 2, 3, 4)\n    ```\n\n3. 数据信息\n\n    ![关联的数据](https:\/\/wanchaochao.github.io\/laravel-repository\/docs\/images\/relation.png '关联的数据')\n\n#### 说明\n    \n1. 上面有个小的问题，`model`定义的关联名称为`extInfo`, 但是出来数组对应的字段信息为\n `ext_info` , 并且查询指定字段信息也是为`extInfo` (`'extInfo' => ['*']`), 查询\n 出来的数据是`laravel` `model` 的 `toArray()` 方法处理的结果,会将`小驼峰`命名的\n 关联信息转为`蛇形`命名字段，`repository`查询字段支持`小驼峰`和`蛇形`命名，例如：\n     \n ```php\n    $users = $this->repository->findAll(['status' => 1], ['*', 'ext_info' => ['*']]);\n ``` \n       \n     和上面的结果是一致的，为了更好的一致性，建议`model`在定义联查询命名的时候，使用单个单词的单复数形式比较好\n\n2. 在查询时候指定字段，并且指定查询关联查询字段\n\n    ```php\n    $users = $this->userRepository->findAll(['status' => 1], ['username', 'extInfo' => ['address']]);\n    ```    \n   \n   上面查询指定了查询的字段，但有一个问题，没有指定出关联表查询需要的字段 `user_id` 字段信息，会导致关联信息关联不上的问题\n   **但`repository`解决了这个问题，会自动加上关联查询需要的字段信息**，所以最终查询的SQL和数据如下:\n   \n   ![关联的数据](https:\/\/wanchaochao.github.io\/laravel-repository\/docs\/images\/relation-1.png '关联的数据')\n   \n   >这可能会让人认为我明明只查询了`username`字段，怎么还查出了其他字段信息\n   \n   **只有在关联查询的时候，没有指定查询关联字段，才会自动加上关联字段**\n   \n### 5.5 `relation`关联统计查询\n\n这个功能比较适合一对多的时候，我想知道关联的其他信息有多少\n\n只要定义了`model`的关联信息，就可以直接使用了，其实就是 `model` 的 `withCount`\n\n>`model`定义的`关联方法名称_count`\n\n`model` 使用上面定义的 [`User`](#152-使用-model-的-scope-查询)\n\n```php\n$user = $this->repositoy->find(['status' => 1], ['id', 'username', 'extInfo_count']);\n```\n\n执行SQL以及数据\n\n![关联的数据](https:\/\/wanchaochao.github.io\/laravel-repository\/docs\/images\/relation-2.png '关联的数据')\n\n### 5.6 给`relation`关联查询添加附加条件\n\n查询条件中添加 `model定义关联方法名称.字段` => '查询的值'\n\n`model` 使用上面定义的 [`User`](#152-使用-model-的-scope-查询)\n\n例如：\n\n```php\n\n$users = $this->repository->findAll([\n    'status'                => 1,\n    'extInfo.address'       => '北京',\n    'extInfo.created_at:gt' => '2019-02-01 00:00:00', \/\/ 同样支持表达式查询\n], ['extInfo' => ['*']]);\n\n```\n执行的SQL：\n```sql\nselect * from `users` where `users`.`status` = 1\n\nselect * from `user_ext` where \n    `user_ext`.`address` = '北京' and \n    `user_ext`.`created_at` > '2019-02-01 00:00:00' and \n    `user_ext`.`user_id` in (1, 2, 3, 4)\n```\n\n### 5.7 过滤空值查询\n\n**空字符串、空数组、null会被认为空值**\n\n#### 1. 查询单个 filterFind($conditions, $columns = [])\n\n    ```php\n    $item = $this->repositpry->filterFind([\n        'username:like' => request()->input('username'),\n        'status'        => request()->input('status')\n    ]);\n    ```\n\n#### 2. 查询多个 filterFindAll($conditions, $columns = [])\n\n    ```php\n    $items = $this->repositpry->filterFindAll([\n        'username:like' => request()->input('username'),\n        'status'        => request()->input('status')\n    ]);\n    ```\n#### 3. 获取过滤空值查询的model getFilterModel($conditions, $columns = [])\n\n    ```php\n    $model = $this->repositpry->getFilterModel([\n        'username:like' => request()->input('username'),\n        'status'        => request()->input('status')\n    ]);\n    ```\n    \n>这几个方法，相当于 [when 条件查询](https:\/\/learnku.com\/docs\/laravel\/5.5\/queries\/1327#conditional-clauses)\n在和前端交互时，不确定前端是否传递值来进行查询时候，比较方便\n\n```php\n\/\/ 平时写法\n$conditions = [];\n\nif ($username = request()->input('username')) {\n    $conditions['username:like'] = $username;\n}\n\nif ($status = request()->input('status')) {\n    $conditions['status'] = $status;\n}\n\n$items = $this->repository->findAll($conditions);\n\n\/\/ 使用 filter 过滤查询\n$items = $this->repositpry->filterFindAll([\n    'username:like' => request()->input('username'),\n    'status'        => request()->input('status')\n]);\n```\n\n### 5.9 使用`join`查询\n\n>`leftJoin` 和 `rightJoin` 和 `join` 使用一致\n\n##### 1. 简单`join`\n\n```php\n$this->repository->findAll([\n    'join' => ['users', 'users.school_id', '=', 'school.id']\n]);\n\n```\n\n```sql\nselect `school`.* from `school` inner join `users` on (`users`.`school_id` = `school`.`id`)\n```\n\n##### 2. 一次多个`join`\n```php\n$this->repository->findAll([\n    'join' => [\n        ['users', 'users.school_id', '=', 'school.id'],\n        ['school as s1', 's1.parent_id', '=', 'school.id']\n    ]\n]);\n\n```\n\n```sql\nselect \n    `school`.* \nfrom \n    `school` \ninner join `users` on (`users`.`school_id` = `school`.`id`) \ninner join `school` as `s1` on (`s1`.`parent_id` = `school`.`id`)\n```\n\n##### 3. 使用关联关系对应join\n\n`model` 使用上面定义的 [`User`](#152-使用-model-的-scope-查询)\n\n```php\n$users = $this->repository->findAll(['status' => 1, 'joinWith' => 'extInfo']);\n```\n\n```sql\nselect \n    `users`.* \nfrom \n    `users` \ninner join `user_ext` on `user_ext`.`user_id` = `users`.`user_id`\nwhere `users`.`status` = 1\n```\n\n##### 4. 使用关联关系对应join并设置别名\n\n>['别名' => '关联方法名称']\n\n```php\n$users = $this->repository->findAll(['status' => 1, 'joinWith' => ['ext' => 'extInfo']]);\n```\n\n```sql\nselect \n    `users`.* \nfrom \n    `users` \ninner join `user_ext` as `ext` on `ext`.`user_id` = `users`.`user_id` \nwhere `users`.`status` = 1\n```\n\n##### 5. 为`join`添加查询条件\n\n>通过 ['__join表名称.字段' => '对应的值'], 目前没有比较直观的方式处理、因为 `order.user_id` 方式被关联关系的附加条件占用了\n\n```php\n$users = $this->repository->findAll([\n    'status'        => 1, \n    'joinWith'      => ['ext' => 'extInfo'],\n    '__ext.user_id' => 1,\n]);\n```\n\n```sql\nselect \n    `users`.* \nfrom \n    `users` \ninner join `user_ext` as `ext` on `ext`.`user_id` = `users`.`user_id`\nwhere `users`.`status` = 1 and `ext`.`user_id` = 1\n```\n\n## 六、关于查询中的`$conditions`和`$columns`信息说明\n\n>`$conditions`为`sql`查询定义查询条件，`$columns`为`sql`的`select`添加指定的查询字段\n\n### 6.1 `$conditions` 查询条件\n\n1. 支持字段精准查询(表中字段的查询)\n2. 预定有字段查询[参考](#211-预定义的字段)\n3. 支持表达式查询[参考](#15-查询进阶使用)\n4. 支持关联条件查询[参考](#156-给-model-的-relation-关联查询动态添加查询条件)\n5. 支持`model`的`scope`[参考](#152-使用-model-的-scope-查询)\n\n例如：\n\n```php\n$conditions = [\n    \/\/ 表中字段精准查询\n    'status' => 1,\n    'id'     => [1, 2, 3, 4], \/\/ 值为数组会自动转为in查询 `id` in (1, 2, 3, 4)\n    \n    \/\/ 预定义字段查询\n    'order' => 'id desc',\/\/ 指定排序字段和方式\n    'limit' => 10,       \/\/ 限制查询条件\n    'group' => 'id',     \/\/ 指定分组条件\n    'force' => 'name',   \/\/ 指定使用的索引\n  \n    \/\/ join 关联查询\n    'join'     => ['users', 'users.user_id', '=', 'orders.user_id'],\n    'leftJoin' => [\n        \/\/ 多个leftJoin\n        ['users as u1', 'u1.user_id', '=', 'orders.user_id'],\n        ['user_image', 'users_image.user_id', '=', 'users.user_id'],\n    ],\n\n    \/\/ 表达式查询\n    'username:like'      => 'test',                                         \/\/ 模糊查询\n    'created_at:between' => ['2019-01-02 00:00:00', '2019-01-03 23:59:59'], \/\/ 区间查询\n    'id:ge'              => 12, \/\/ id > 12\n\n    \/\/ relation 关联查询,查询条件只对当前relation关联查询限制\n    'extInfo.address:like'   => '北京',\n    'extInfo.created_at:gte' => '2019-01-01 00:00:00',\n    \n    \/\/ 通过 relation 关联关系，添加join 查询\n    'joinWith'     => ['extInfo'],\n    \/\/ 关联表定义别名 alias, 如果没有别名，关联表和主表同名，使用自定义别名 `t1`, 多个同名以此地址 `t2`、`t3`\n    'leftJoinWith' => ['alias' => 'children'], \n    \n    \/\/ scope 自定义查询\n    'address'  => '北京',     \/\/ 查找`scopeAddress($query, $address)`方法\n    'children' => [1, 2, 3],  \/\/ 查找`scopeChildren($query, $childrenIds)`方法\n];\n```\n\n#### 2.1.1 预定义的字段\n\n| 字段名称        | 字段值类型        | 说明                                |\n| --------------- | ----------------- | ----------------------------------- |\n| `or`            | `array`           | 添加`or`查询                        |\n| `and`           | `array`           | 添加`and`查询                       |\n| `force`         | `string`          | 强制走指定索引                      |\n| `order`         | `string or array` | 指定排序条件                        |\n| `limit`         | `int`             | 指定查询条数                        |\n| `offset`        | `int`             | 指定跳转位置                        |\n| `group`         | `string`          | 指定分组字段                        |\n| `join`          | `array`           | 查询join的参数，多个二维数组        |\n| `leftJoin`      | `array`           | 查询`leftJoin`的参数、多个二维数组  |\n| `rightJoin`     | `array`           | 查询`rightJoin`的参数、多个二维数组 |\n| `joinWith`      | `string or array` | 通过关联关系对应join查询            |\n| `leftJoinWith`  | `string or array` | 通过关联关系对应leftJoin查询        |\n| `rightJoinWith` | `string or array` | 通过关联关系对应rightJoin查询       |\n\n### 6.2 `$columns` 查询的字段信息\n\n1. 支持本表字段查询\n2. 支持关联统计字段查询\n3. 支持关联数据字段查询\n\n```php\n$columns = [\n\n    \/\/ 本表的字段查询\n    'id',\n    'username',\n\n    \/\/ 关联表的字段查询\n    'users.username',\n    'users.age',\n    \n    \/\/ 使用表达式查询\n    DB::raw('SUM(`users`.`age`) AS `sum_age`'),\n    \n    \/\/ 关联统计字段查询\n    'extInfo_count',  \/\/ 对应`model`定义的 extInfo 关联\n    'children_count', \/\/ 对应`model`定义的 children 关联\n    \n    \/\/ 关联表字段查询\n    'extInfo'  => ['*'], \/\/ 对应`model`定义的 extInfo 关联\n    'children' => ['*'], \/\/ 对应`model`定义的 children 关联\n];\n```\n\n## 七、方法列表\n\n### 7.1 方法列表\n\n>repository所有方法都是对外的，这里只列出常用方法\n\n| 方法名称                                                                       | 返回值                               | 方法说明                                                          |\n| ------------------------------------------------------------------------------ | ------------------------------------ | ----------------------------------------------------------------- |\n| `find($conditions, $columns = [])`                                             | `array or false`                     | 查询一条数据                                                      |\n| `findBy($conditions, $column)`                                                 | `mixed`                              | 查询单条数据的单个字段                                            |\n| `findAll($conditions, $columns = [])`                                          | `array`                              | 查询多条数据                                                      |\n| `findAllBy($conditions, $column)`                                              | `array`                              | 查询多条数组的单个字段数组                                        |\n| `filterFind($conditions, $columns = [])`                                       | `array or false`                     | 过滤查询条件中的空值查询一条数据                                  |\n| `filterFindAll($condtions, $columns = [])`                                     | `array`                              | 过滤查询条件中的空值查询多条数据                                  |\n| `paginate($conditions = [], $columns = [], $size = 10, $current = null)`       | `array`                              | 分页查询数据                                                      |\n| `filterPaginate($conditions = [], $columns = [], $size = 10, $current = null)` | `array`                              | 过滤查询条件中的空值分页查询数据                                  |\n| `getFilterModel($conditions, $columns = [])`                                   | `Illuminate\\Database\\Eloquent\\Model` | 获取已经过滤处理查询条件的`model`                                 |\n| `findCondition($conditions = [], $columns = [])`                                  | `Illuminate\\Database\\Eloquent\\Model` | 获取已经处理查询条件的`model`(**上面所有查询方法都基于这个方法**) |\n| `create(array $data)`                                                          | `array`                              | 添加数据                                                          |\n| `update($conditions, array $data)`                                             | `array`                              | 修改数据(使用的是批量修改)                                        |\n| `delete($conditions)`                                                          | `array`                              | 删除数据(使用的是批量删除)                                        |\n\n#### 参数说明\n\n| 参数名称      | 参数类型                 | 参数说明                                                              |\n| ------------- | ------------------------ | --------------------------------------------------------------------- |\n| `$conditions` | `array or string or int` | 查询条件(`string or int or 索引数组[1, 2, 3, 4]`会自动转换为主键查询) |\n| `$columns`    | `array`                  | 查询的字段数组                                                        |\n| `$column`     | `string`                 | 查询的字段名称                                                        |\n| `$data`       | `array`                  | 创建或者修改的数组数据信息                                            |\n| `$where`      | `array`                  | 查询条件                                                              |\n\n### 7.2 支持`model`的方法\n\n| 方法名称                                               | 返回值                                     | 方法说明                          |\n| ------------------------------------------------------ | ------------------------------------------ | --------------------------------- |\n| `getConnection()`                                      | `Illuminate\\Database\\Connection`           | 获取连接信息                      |\n| `insert(array $values)`                                | `boolean`                                  | 新增数据(支持批量新增)            |\n| `insertGetId(array $values)`                           | `int`                                      | 新增数据并获取新增ID              |\n| `firstOrCreate(array $attributes, array $value = [])`  | `Illuminate\\Database\\Eloquent\\Model`       | 查询数据，不存在那么新增一条数据  |\n| `firstOrNew(array $attributes, array $value = [])`     | `Illuminate\\Database\\Eloquent\\Model`       | 查询数据、不存在那么`new`出来     |\n| `updateOrCreate(array $attributes, array $value = [])` | `Illuminate\\Database\\Eloquent\\Model`       | 修改数据，不存在那么新增一条数据  |\n| `findOrFail($id, $columns = ['*'])`                    | `Illuminate\\Database\\Eloquent\\Model`       | 通过主键查询数据，不存在抛出错误  |\n| `findOrNew($id, $columns = ['*'])`                     | `Illuminate\\Database\\Eloquent\\Model`       | 通过主键查询数据，不存在`new`出来 |\n| `findMany($ids, $columns = ['*'])`                     | `\\Illuminate\\Database\\Eloquent\\Collection` | 通过主键数组查询多条数据          |\n\n#### 参数说明\n\n| 参数名称      | 参数类型        | 参数说明                                           |\n| ------------- | --------------- | -------------------------------------------------- |\n| `$attributes` | `array`         | `model`的字段信息(查询条件)                        |\n| `$value`      | `array or null` | `model`的其他字段信息(不参与查询、参与新增和`new`) |\n| `$values`     | `array`         | 新增数据需要的字段 => 值 数组信息                  |\n| `$id`         | `int or string` | 主键ID值                                           |\n| `$ids`        | `array`         | 主键ID数组                                         |\n| `$columns`    | `array`         | 查询的字段信息                                     |\n\n### 7.3 通过`findCondition($conditions)`查询后转换为`model`查询方法\n\n| 方法名称                                       | 返回值                                       | 方法说明                       |\n| ---------------------------------------------- | -------------------------------------------- | ------------------------------ |\n| `first($conditions, $columns = ['*'])`         | `Illuminate\\Database\\Eloquent\\Model or null` | 查询一条数据                   |\n| `get($conditions, $columns = ['*'])`           | `Illuminate\\Database\\Eloquent\\Collection`    | 查询多条数据                   |\n| `pluck($conditions, $column, $key = null)`     | `Illuminate\\Support\\Collection`              | 查询单个字段信息               |\n| `firstOrFail($conditions)`                     | `Illuminate\\Database\\Eloquent\\Model`         | 查询一条数据、没有那么抛出错误 |\n| `count($conditions = [])`                      | `int`                                        | 统计查询                       |\n| `max($conditions, $column)`                    | `int or mixed`                               | 最大值查询                     |\n| `min($conditions, $column)`                    | `int or mixed`                               | 最小值查询                     |\n| `avg($conditions, $column)`                    | `int or mixed`                               | 平均值查询                     |\n| `sum($conditions, $column)`                    | `int or mixed`                               | 求和查询                       |\n| `toSql($conditions)`                           | `string`                                     | 获取执行的`SQL`                |\n| `getBindings($conditions = [])`                | `array or mixed`                             | 获取查询绑定的参数             |\n| `increment($conditions, $column, $amount = 1)` | `int`                                        | 指定字段累加                   |\n| `decrement($conditions, $column, $amount = 1)` | `int`                                        | 指定字段累减                   |\n\n#### 参数说明\n\n| 参数名称      | 参数类型                 | 参数说明                                                              |\n| ------------- | ------------------------ | --------------------------------------------------------------------- |\n| `$conditions` | `array or string or int` | 查询条件(`string or int or 索引数组[1, 2, 3, 4]`会自动转换为主键查询) |\n| `$columns`    | `array`                  | 查询的字段数组                                                        |\n| `$column`     | `string`                 | 查询的字段名称                                                        |\n| `$key`        | `string or null`         | 查询单个字段组成数组的`key`(索引下标使用字段)                         |\n\n## 八、增删改的事件方法\n\n>子类定义了这些方法，才会执行，如果想阻止主方法执行，并能让主方法返回错误信息，直接抛出错误就可以\n\n### 8.1 新增的事件 在`create($data)` 执行的时候触发\n\n1. `beforeCreate($data)` 新增之前\n\n2. `afterCreate($data, $news)`  新增之后\n\n#### 参数说明\n\n| 参数名称 | 参数类型 | 参数说明                               |\n| -------- | -------- | -------------------------------------- |\n| `$data`  | `array`  | 过滤掉干扰数据(非表中字段的数据)的数组 |\n| `$news`  | `array`  | 新增成功调用 `model->toArray()` 数组   |\n\n### 8.2 修改的事件 在`update($conditions, array $data)` 执行的时候触发\n\n1. `beforeUpdate($conditions, $data)` 修改之前\n \n2. `afterUpdate($conditions, $data, $row)` 修改之后\n\n#### 参数说明\n\n| 参数名称      | 参数类型 | 参数说明                               |\n| ------------- | -------- | -------------------------------------- |\n| `$conditions` | `array`  | 处理了主键查询后的查询条件数组         |\n| `$data`       | `array`  | 过滤掉干扰数据(非表中字段的数据)的数组 |\n| `$row`        | `int`    | 修改受影响的行数                       |\n\n### 8.3 删除的事件 在`delete($conditions)` 执行的时候触发\n\n1. `beforeDelete($conditions)` 删除之前\n\n2. `afterDelete($conditions, $row)` 删除之后\n\n#### 参数说明\n\n| 参数名称      | 参数类型 | 参数说明                       |\n| ------------- | -------- | ------------------------------ |\n| `$conditions` | `array`  | 处理了主键查询后的查询条件数组 |\n| `$row`        | `int`    | 删除受影响的行数               |\n\n### 8.4 关于`$conditions` 处理为主键查询\n\n不为空的 字符串、整数、浮点数、索引数组 都会被转为主键查询\n\n```php\n\/\/ 假设表的主键为id\n\n$conditions = 1;            \/\/ 会被转为 ['id' => 1]\n$conditions = '1';          \/\/ 会被转为 ['id' => '1']\n$conditions = [1, 2, 3];    \/\/ 会被转为 ['id' => [1, 2, 3, 4]]\n\n\/\/ 关联数组中，只要有一个元素为索引下标的，会被认为是 索引数组\n$conditions = ['id' => 1, 'name' => '123', '789'];\n\n\/\/ 同样会被认为是索引数组，会转为 \n$conditions = ['id' => [1, '123', '789']];\n\n```\n\n## 九、其他说明\n\n### 9.1 关于`repository`的`create`、`update`、`delete` 的返回\n\n这三个函数不管处理成功和失败，返回的都是数组信息。因为`php`不能像`golang`那样,\n可以多返回，而在我们逻辑中，经常需要知道执行错误了，是什么样的错误信息，所以这里\n都是通过数组的方式返回，这样就解决多值返回问题。这也是受`golang`的影响！不过\n`laravel`其实更推荐是通过抛出错误方式，去统一管理所有的错误信息。所以如果不喜欢\n现在数组的返回方式的话，只需要重写 `success($data, $message === 'ok')` \n和 `error($message, $data = [])` 这两个方法就好了\n\n### 9.2 `repository` 查询 `find`, `findAll` 查询结果都是 `model->toArray()` 的数组，并不是 `model` 对象\n\n### 9.3 对于`model`的要求\n\n1. `create` 和 `update` 都是批量赋值，需要`model`定义批量赋值的白名单`$fillable` 或者 黑名单 `$guarded`\n2. 需要定义 `$columns` 字段信息，表示表中都有哪些字段\n\n    ```\n    public $columns = ['id', 'title', 'content', 'created_at', 'updated_at'];\n    ```\n    \n    >虽然这一步是非必须的，但定义了`$columns`会减少一次`SQL`查询的代价"
    },
    "msg": "ok"
}